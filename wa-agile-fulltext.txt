https://www.amazon.co.jp/dp/4815011486
2019/6/30



和アジャイルの誰時β2
日本で実施する発注型アジャイル開発

Step1 まず発注側がアジャイル組織に変革すべし。
　　　アジャイル開発のメリットを享受するのは発注側の経営者である。
　　　ソフトウェア開発の現実を知り、日米の格差を知って、
　　　発注側経営者は組織価値観を変革し、制度を適合させ、
　　　PO人材を育成し、援護すべし。

Step2 発注者は開発者から信頼された仲間になるべし。
　　　責任押し付け、予定実績管理するだけでは良い開発はできない。
　　　ゴールを示し、皆に理解してもらってチームを作り、
　　　一人ひとりを知って適材適所に配し、
　　　状況・問題点・今後の方針を積極的に聞き、対外調整を実施し、
　　　丁寧な対話とバランスの良い優先度判断を常に心がけ、
　　　仲間であり人格者のリーダとして信頼されるようになり、
　　　仲間とともに持続的なWin-Winと成長を目指すべし。

 Step3 受注者全員が日々、全体と優先度を考え行動すべし。
　　　真のゴールとPOの価値観を理解し、チームの現状を把握し、
　　　自らの状況を適切な相手に適切なタイミングで伝え、
　　　次の作業案をもって優先度を都度POと相談し、
　　　技術者としての高い付加価値を提供し続けるべし。




目次

目次
1．　日本におけるアジャイル開発　	1
1.1 アジャイル開発を、誰が、なぜ、求めるのか？　	1
1.2 皆が認めるべき、ソフトウェア開発の現実　	3
1.3 ウォーターフォール開発では、なぜダメなのか？　	7
1.4 日本の慣習で、なぜアジャイル開発は失敗するのか？　	9

2．　発注側　経営幹部の心得　	17
2.1 アジャイル開発は、あなたの望みを実現する手段　	17
2.2 組織をアジャイル開発に適合させる　	20
2.3　PO人材を育成し、援護する　	23
2.4 アジャイル開発の不都合を理解する　	29

3．　発注側　POの心得　	33
3.1 プロダクトオーナ(PO)の責任と権限を理解し納得する　	33
3.2 発注側幹部がアジャイル開発の価値観に納得していない時　	38
3.3 ゴールに対して、価値のある部分をまず動かして全体の目処をつける　	41
3.4 動いたら、ステークホルダに見せ、アジャイル開発の価値を活かす　	44
3.5 その後も「動くものを作る」を忘れずに、改善のサイクルを回す　	47
3.6 期待されるのは普通のビジネス・リーダシップ　	50
3.7 ウォーターフォール思考・姿勢の注意点　	51
3.8 コミュニケーションは大切、・・・相談を中心にする　	54
4．　コミュニケーションの本質を考え直す　	55
4.1　コミュニケーションには、双方の努力が必要　	55
4.2 相手を知る＝相手の人物モデルを自分の中に持つ　	59
4.3 重要なことを先に。段階的に詳細化し相互理解する　	62
4.4 モチベーションを上げるために （PO視点）　	63
4.5 チームの質も上げよう （PO視点）　	65
4.6 悪い情報を素早く収集する仕組みを作って、
　　大失敗を回避する （PO視点）　	66
4.7 ウォーターフォール型コミュニケーションの悪癖　	69

5．　現場でのアジャイル開発スタイル
　　　（PO実践編）　	71
5.1 技術者を集める　	71
5.2 自らがゴールを示し、皆に理解してもらってチームを作る　	76
5.3 一人ひとりを知って適材適所に配置する　	78
5.4 状況・問題点・今後の方針を積極的に聞き、現場を正しく理解する　	79
5.5 ステークホルダとの調整を実施する　	81
5.6 丁寧な対話を続け、バランスの良い優先度判断を続ける　	83
5.7 人格者のリーダとして信頼される　	84
5.8 仲間とともにWin-Winと成長を目指す　	85

6．　品質について考え直す　	87
6.1 ウォーターフォール開発では形式的な合意形成の事例がある　	87
6.2 アジャイル開発での品質確保・試験終了の考え方　	92
6.3 【方針1】　重要な部分から、品質を確保する　	94
6.4 【方針2】　継続的に品質を改善する(自動リグレッション・テストの整備)　	98
6.5 それでも、納期が厳しく品質も求められる場合の対応（例）　	102

7．　開発担当者の心得　	105
7.1 真のゴール、POの価値観、チームの状況を理解し、
　　POの判断に近づく努力をする　	105
7.2 自らの状況を適切に伝えるコミュニケーション姿勢を持つ　	108
7.3 次になすべき作業案をもって優先度を都度POと相談する　	111
7.4 技術者として高い付加価値を提供するべし　	113
7.5 相互にフィードバックし、双方が成長する　	115
7.6 アジャイルの罠に注意する　	116
7.7 ウォーターフォールの悪癖は矯正する　	118

8．　受注側　開発責任者の心得　	123
8.1 アジャイル開発を受注するときに確認する　	123
8.2　POをサポートする　	132
8.3 作業管理責任者として行動する　	133
8.4 受注側組織の体制・価値観をVerUpする　	136
8.5 品質保証（QA）部門の役割は微妙です　	139

9．　和アジャイルの誰時　	141
9.1 本書をざっと、まとめ直してみる　	141
9.2 和アジャイルが目指すべき世界　	144
9.3 本書籍もβ版　	146

補足1 　アジャイルソフトウェア開発宣言　	147
補足2 　ウォーターフォール開発の見積りとは何だったか？　	148
補足3 　ウォーターフォール開発の品質とは何だったか？　	152
補足4 　準委任契約と派遣契約の違いに注意　	154
補足5 　アジャイル開発におけるリーダシップとは？　	155
補足6 　単能工と多能工、ライン生産とセル生産　	156
補足7 　本書で使う工程名とV字モデル　	157
補足8 　本書の色使い　	158



1．　日本におけるアジャイル開発




1.1 アジャイル開発を、誰が、なぜ、求めるのか？

■　アジャイル開発は発注側の経営幹部が望むソフトウェア開発の競争力を実現します。

　ソフトウェア開発発注側の経営幹部は、情報システム（ソフトウェア開発力）を企業競争力の源泉と思っているでしょうか？　そうであれば、その競争力実現のためアジャイル開発の採用を決定するのは間違いないでしょう。　それによって得られるものは、米国企業や国内ベンチャー系企業に対抗できる競争力（開発スピードと変化対応力）です。　この競争力をウォーターフォール開発で得ることは困難です。　

■　アジャイル開発の開発スピードや変化対応力よりも、開発リスク低減を重視する非競争組織の経営幹部もいます。

　一方、ソフトウェア開発発注側の経営幹部に市場競争力の向上という価値観が無い場合や、幹部が発注側の開発リスクを低減することの方が重要だと考える場合には、アジャイル開発の提供する価値は無意味です。　これは例えば、公的機関や共通事務部門の一部に見られるかもしれません。

■　「優先度の高いところから開発し、動くものを作ってユーザの反応を得て改善を続けていく」 という開発スタイルは、経営幹部にとっては普通のビジネス・スタイルと一緒です。



■　アジャイル開発では、ソフトウェアは「金で買う」から、「チームで一緒に作って育てる」ものになります。

　インターネット上でグローバルに競争する時代の経営幹部は、当初の計画のまま １年間進めきることなど、考えもしないでしょう。　目指すべきゴールに対して、計画はもちつつも、常にライバルや市場の状況を見て、都度、計画を見直し重要度の高いものから手を打ち、市場の反応を見てまた素早く軌道修正をするという進め方をしているはずです。　アジャイル開発とは、極論すれば、そのビジネス・スタイルをソフトウェア開発でも実践することです。　そのとき、ソフトウェア開発は、単なる「金で買う」ことから、「チームで一緒に作って育てる」ことに変革しているに違いありません。　駄目ソフトウェアを、時間をかけて安く買っても無駄なのです。　素早い変化対応力が大切です。　そこにこそ高い価値があるのです。　市場の反応を理解してソフトウェア開発の優先度を見直し開発をリードする発注側のキーマンを、プロダクト・オーナ（PO）とアジャイル開発では呼びます。


1.2 皆が認めるべき、ソフトウェア開発の現実

　ソフトウェア開発は工学的に未熟な状態にあります。　その中で良いソフトウェアを作るために理解し認めなければならない幾つかの現実があります。

■　ソフトウェアを混乱少なく開発するには、作りたいソフトウェア（ゴール）の明確化が必要です。



　発注側は、まずはゴールイメージをできるだけ具体化すべきです。　具体化しなければ開発者に伝えることさえできません。　ゴールイメージを作るまでは開発を開始しないことが懸命です。　その場合には開発の前に、検討する期間を設けましょう。
　アジャイル開発ではゴールイメージが決まり開発を開始した後に、外的要因によってゴールイメージが変化することについて、積極的に許容します。　しかし、それはゴールイメージが無いまま開発を進めることとは異なります。　



　ウォーターフォール開発における仕様変更よりはアジャイル開発の方が短期間で対応できることでしょう。　ただし、納期が固定で延伸できない場合には、追加した開発作業量以上の作業量をどこかで削らなければソフトウェアは納期までに完成しないでしょう。

■　良いソフトウェアは高いスキルと高いモチベーションを持つ人によって開発されます。



　これを優良ソフトウェア開発原理(GSDP)と呼ぶことにします。　これは十分条件ではなく、必要条件です。　開発者に高いスキルと高いモチベーションが無いと良いソフトウェアは生まれません。　インターネットの普及などと共に情報処理技術はコモディティ化しています。　日本においても教育制度の改革の中で高い情報処理スキルを持つ人は徐々に増えていきます。　内製も困難ではない時代になってきているでしょう。　後は、開発者に高いモチベーションを持ってもらうことが大切なポイントとなります。



　アジャイル開発の場合には、ゴールに共感する開発メンバによって開発を進めることも可能です。　その時、アジャイル開発はウォーターフォール開発に比べて圧倒的に有利な開発環境を得たことになるでしょう。　ただし、そのためには発注側の負担がより多くなる点には覚悟が必要です。

■　ソフトウェアの科学的かつ実用的見積りは困難です。



　ここで、科学的とは、誰が実施しても期待の見積り精度があるもの、実用的とは、低コスト（数日）で見積り可能なものとします。　科学的と実用的の両方を同時に満たす方法は現時点では存在しません。　この事実を認めたくない人々も今時点の日本には多数存在すると思います。　実際、「これまで、見積りできているではないか？」、「私はパワポ１枚の資料を出しても３日間で見積りをもらって、それで契約して、ちゃんと開発を成功させたぞ！」と、反論する人もいるでしょう。　しかし日本の多くの見積りではKKD法を使っていると予想します。　KKDは英単語の略称ではありません。　K（勘）、K（経験）、D（度胸）という和製の日本国内限定用語です。　
　ソフトウェアの見積りに精度については、インターネットなど存在せず技術の進歩がそれほど早くなかった1980時代初頭から大きな誤差がでることは示されていました。　これは不確実性コーンとも呼ばれています。　詳細は、巻末の補足2に譲ります。
　KKD法の中で、唯一便りになるのが、経験の蓄積の活用です。　これまで多くの試みがあります。　しかし、インターネットによって技術の進歩が一段と早くなった現代、さらに多様なソフトウェア形態が求められるようになった現代において、過去データの蓄積を使った類推による見積りは益々困難になっています。　仕様変更に伴う再見積り時であっても一緒です。
　不確実性を減らす努力を発注者も協力して行い、時間をかければ見積りの精度も高められます。　しかし、多くの場合にそれはアジャイル開発そのものよりも、だいぶ非効率なものになるでしょう。　ましてや、仕様変更が多発するソフトウェア開発で精度の低い見積りはただの無駄です。　合理的でロジカルな国の人々は、KKD法などという意味不明な手法を認めることはなく、アジャイル開発を普及させることになりました。






1.3 ウォーターフォール開発では、なぜダメなのか？



　ウォーターフォール開発(WF)は工程を区切り、前の工程までをきちんと仕上げてから次の工程に進む開発スタイルです。　各工程の成果物をしっかりレビューし品質を確保します。　V字モデルに従って成果物とテストとを対応（例：詳細設計書に単体試験を、基本設計書にシステム結合テストを、要求仕様書にシステム総合テスト対応を）させて品質の積み上げと呼ばれる作業を行います。
　一旦、要件FIXや仕様FIXを行うと、その後の工程でそれらを変更することは原則として行いません。　逆流しないことからウォーターフォール(滝)なのです。　多くの開発は半年～１年以上の期間があるためWebサービス利用者の声を開発に反映するのに時間がかかる（細かく反映することには向かない）という弱点があります。
　なお、ウォーターフォール開発は悪ではありません。今後も消滅はしないと思われます。　開発手法の違いはシステム開発に求める価値観の違いに依存するのです。



　ウォーターフォール開発には、もっと大きな問題点があります。　それは正しくない見積りに対して、請負開発契約での納期固定で完成責任が発生する本質的な矛盾です。　開発プロジェクトがデスマーチ（死の行進）化すると、開発担当者のモチベーションが低下し、そのとき作成されるフトウェアは仕様を満たす最低限のものになります。 
　別のケースとして、ウォーターフォール開発を前提としながら仕様のFIXをせずに開発を実施することで、ソフトウェア開発プロジェクトがデスマーチ化することもあります。　この場合も同様に、モチベーションが低下した開発担当者によって、最低限のソフトウェアが作成されます。
　これらの課題に正面からウォーターフォール開発で対応するには、高精度の再見積りと機敏な契約変更の実施が必要です。　しかし、再見積りについてもKKD法であることは変わりませんし、請負契約文化の中では、変更理由の妥当性を経営幹部に理解してもらうことは困難でしょう。　増額や納期延伸も拒否されるかもしれません。　柔軟な契約変更という幻想は日本では十分に機能していないと思います。　
　3K（きつい、厳しい、帰れない？）の開発現場からは、良いソフトウェアは生まれません。　そんなソフトウェアによるサービスでグローバルに他社と対等な競争ができる訳がありません。　
　


1.4 日本の慣習で、なぜアジャイル開発は失敗するのか？

　このように優位性のあるアジャイル開発ですが、日本で実施すると失敗することがあります。　それは、なぜでしょうか？

■　請負開発契約でアジャイル開発を実施すると、良いソフトウェアは作れません。

　開発契約には大きく２種類あります。　製造請負契約と準委任契約です。　図1-1にその違いを示します。
　アジャイル開発では、発注側のPOがいつでも仕様の変更の権利を持ちます。　よって、請負開発つまり金額固定の前提である仕様FIXの合意がありません。　請負開発契約によってアジャイル開発を実施することは、受注側がどんなに精度高く見積っても全く意味の無い見積りでソフトウェア開発を実施することと同じです。　これでは契約を超えた特別な調整でも無い限り、良いソフトウェアが作成されることはありません。　そんな中で製造されたソフトウェアに対して品質保証（瑕疵担保責任）ができるはずもありません。


図1-1　製造請負契約と準委任契約

■　日米差を理解せず、米国発のアジャイル開発翻訳本の内容をそのまま日本で実施してしまうと良いソフトウェアは作れません。

　日本と米国のソフトウェア業界には、決して無視できない大きさ差異が存在します。代表的な日本と米国の違いを見つめ直してみましょう。

・日本で主流のソフトウェア開発は、金額固定・納期固定・仕様固定で完成品を届ける請負開発契約で、かつ、親和性の高いウォーターフォール開発スタイルで実施している。
・日本ではソフトウェアは「金で買う」という価値観が主流であって、受注側に完成責任があると考えている。　会計・契約部門などは、仕様を満足すれば誰が作っても同じものができると思っているから、「できるだけ安く買う」ことが目標となっている。
・日本において技術者の流動性は低く、経験とスキルが高い多くの開発者とプログラマはソフトウェア開発会社（SI会社）に囲い込まれている。
・日本の多くの開発者やプログラマは、コミュニケーションに不得意意識があり、面倒な作業だと思っている。


図1-2 日本と米国の開発スタイルの違い



図1-3 ソフトウェア製造に対する価値観の争い

　図1-2, 図1-3に示すように日米にはソフトウェア開発の契約制度、ソフトウェア開発に対する価値観、プログラマなど技術者の雇用制度、ソフトウェア技術の成熟度など、重要な差異が存在します。　それらの差異を理解せず、米国発の翻訳本の主張をそのまま現在の日本に適用してはいけません。　



　 アジャイルソフトウェア開発宣言（巻末の補足1）にある『契約交渉よりも顧客との協調を、』 という文言部分を、あまりにも素朴に受け止めて契約を気にしないことは大変危険です。
　アジャイル開発において、意味のない見積りに時間をかけること、および、それをベースとした契約交渉に時間をかけることは大きな無駄です。　しかし、請負開発契約で進めるアジャイル開発は失敗です。　請負開発契約でアジャイル開発を実施してはいけません。　アジャイル開発で良いソフトウェアを作りたいのであれば準委任契約（技術者スキルと稼動量実績値で支払う契約）もしくは派遣契約を締結してアジャイル開発を実施しなければいけません。


■　日米の違いを理解し、不足するものを整備・確保してアジャイル開発に望みましょう。

　最初に発注側組織がアジャイル開発に対応する組織に変革しなければいけません。　そのためには次の3つの視点が重要です。　そして経営幹部が危機感を持って推進しなければそれらは実現できません。

　　【変革観点1】　　意思・価値観
　　【変革観点2】　　責任・制度
　　【変革観点3】　　PO人材育成

これらを2章 幹部の心得と、3章 POの心得で具体的に考えていきます。

■　アジャイル開発の推進の動機は、発注側にあります。

　アジャイル開発を日本で進める正しい順序は、以下になります。　受注側がアジャイル開発の実施を発注側の協力なしに推進することはあり得ません。
















2．　発注側　経営幹部の心得






2.1 アジャイル開発は、あなたの望みを実現する手段

■　ソフトウェア開発の競争力を上げるためにアジャイル開発を採用・推進するという意思を表明してください。

　アジャイル開発を推進するために、最初に重要なのは、あなた自身の意思です。

・情報システム（ソフトウェアサービス）の開発力が自社の競争力の源泉だと思っていますか？
・米国企業や国内ベンチャー企業等のソフトウェア開発力を脅威に感じており、自社のソフトウェア開発力が低いことに危機感を持っていますか？

これらに同意できるでしょうか？　「Yes」であって、現在ウォーターフォール開発スタイルを採用しているのであれば、アジャイル開発スタイルに変革するべきでしょう。　

■　あなた自身の危機感と覚悟を関係する組織の人々に伝え、あなたが変革をリードしていかなければいけません。

■　アジャイル開発においてソフトウェア製造の責任は、お金を出す発注側になります。 

■　アジャイル開発の責任者はプロダクト・オーナ（PO）です。あなたはPOを育成し、援護しましょう。

あなた自身の価値観（図2-1）は、以下のいずれでしょうか？





アジャイル開発を推進するのであれば、 【価値観AG】 に同意できると思いますが、その場合、ソフトウェア製造の責任は自社側になることに注意が必要です。　きっと、この変化に対して、これまで 【価値観WF】 に慣れた組織や担当者からの抵抗があるでしょう。　お金を払っておいて自社で製造の責任を負うのでは損をしていると思う人もいるでしょう。　しかし、市場競争を含めた大局で見れば競争力の低いソフトウェアをお金と時間をかけて得ることの方が大きな無駄なのです。　あなた自身の危機感と覚悟をそれらの組織の人々に伝え、説得し、再教育し、変革をリードしていかなければいけません。

図2-１ 社長（経営幹部）の価値観

2.2 組織をアジャイル開発に適合させる

　あなたがアジャイル開発の推進を表明した後、あなたの組織がアジャイル開発を実施できるようになるためには、あなたはいくつかの変革をリードしなければいけません。

■　価値観が浸透するまで繰り返し提示しましょう。

　アジャイル開発が必要になる背景を、あなたの組織（発注側の関係組織）の人々が理解しなければいけません。

・情報システムの開発が企業の競争力の源泉です。
・ライバル（米国企業や国内ベンチャー企業等）はアジャイル開発によってその競争力を実現しています。
・ソフトウェアは物買いではなく、自らが優秀な技術者の協力を得て作り上げるものにしなければ、競争力のある真に良いソフトウェアは完成しません。
・アジャイル開発ではソフトウェアの開発責任と仕様コントロール権は発注側にあります。　見積り責任も完成責任も発注側にあります。

　これらの現実、時代の変化に応じた価値観の変化を受け入れるには、おそらく抵抗もあるでしょう。 あらゆる人に、あなたの意思と価値観を示すことで解決していかなければいけません。


■　契約種別（準委任契約）を整備しましょう。

　アジャイル開発を発注する場合の契約種別は、請負開発契約では失敗します。　準委任契約もしくは派遣契約にて実施すべきと開発組織および契約組織に宣言し、必要なら社内制度を整備しましょう。

・抵抗例：　見積り競争が無いことで不安になる。
・抵抗例：　準委任契約自体に抵抗感がある。お金を出して、発注側が責任を持つことに理解が示せない。
・抵抗例：　未だにソフトウェア開発を建築とのアナロジーで捉えていて、時代の変化に着いていけない。　

■　契約人月単金の基準を見直し、優秀な人材を確保できるように柔軟性を持たせましょう。

　アジャイル開発では、できるだけモチベーションとスキルが高い技術者を確保し、コミュニケーション・コストを下げるために少数精鋭のチーム作りをするのが理想です。
契約の人月単金を下げる交渉をすれば、技術者の質が下がります。　スキルを正しく評価した適切な単金基準を用意しなければいけません。　実際に働いてもらいスキル貢献度に応じて金額を調整していける仕組みが最も合理的です。

・抵抗例：　人月単金を競争で下げることをしないので不安になる。
・抵抗例：　人月単金の基準を作れないので判断できない。
・抵抗例：　従来の慣習に従いたい。

■　POに与える責任に応じた権限を与えましょう。　【権限・責任バランスの原則】

　アジャイル開発ではPOに開発完成責任が発生します。 POには、その責任に見合った権限が与えられるように社内制度を整えましょう。　責任だけ大きくて権限が無い開発では失敗は目に見えています。 

・抵抗例：　POの役職が低すぎるから重要な権限は与えられない。
・抵抗例：　POがまだ若すぎるから重要な権限は与えられない。
・抵抗例：　その権限をPOに与えると、上位職の役割(存在意味)が無くなるから与えられない。





2.3　PO人材を育成し、援護する

■　PO人材への期待は、一般的に言われるビジネスのリーダシップと同一です。

　PO人材への期待を表明して、POとして活躍できる人材を増やしていきましょう。　　では、PO人材への期待は何でしょうか？　



　アジャイル開発の進め方は経営者のビジネス・スタイルに近いものになりますから、ある程度の情報処理スキルを持っていれば、後は、一般的に言われるビジネスのリーダシップの能力と同じになります。　詳細は他書籍に譲りますが、たとえば以下のような期待があります。

・視野が広く現実を見る力がある。（競合状況、ステークホルダ都合、サービスと市場動向、エンドユーザ心理、開発現場の実態と課題など）
・費用対効果など、ビジネスセンスがあることも重要。
・バランスの良い判断ができる。　優先度判断力があり的確。　判断理由（ビジョン）を言えることが望ましい。
・間違った場合にも素直に謝罪し、訂正できる力がある。
・責任を完遂するために、考え続ける習慣がある。
・良いソフトウェアを目指すモチベーションがある。
・難題には自らが先頭で立ち向かう姿勢がある。
・人格面で信頼されている。
・コミュニケーション力がある。
・メンバを育成する。

　自組織内にPOがいなければどうすれば良いでしょうか？　自らの後継者候補をまずはPOにして育てていくことも一つの方法でしょう。
　情報処理スキルとビジネス・リーダシップのどちらか一方を選ぶのであれば、ビジネス・リーダシップを選び、適切な技術面のアドバイザを同伴させます。



図2-2 　POはバランスを維持する存在


■　POに対する古い価値観の組織からの抵抗に、あなたが援護しましょう。

　組織が、アジャイル開発に対応できるまでの間、POは組織の各所から様々な抵抗を受けることになります。　

・抵抗例：　新しい価値観とこれまでの社内規定との整合性が取れない。
・抵抗例：　新しい仕組みを導入するには、これまでとは異なる法制度の適用を学び考えて、新たな規定を作らなければいけないので面倒である。
・抵抗例：　そもそも新しいことが嫌である。　前例がない。

このような前例主義者や無思考主義者とPOを戦わせてはいけません。　時間の無駄です。　POは、社内の抵抗と戦うよりも、良いソフトウェア開発に集中してもらうべきです。　情報システムの開発が会社の競争力を左右するのであれば、それらの組織的課題をできるだけPOから切り離し、あなた自身が解消していかなければいけません。　再び、あなた自身がその場に立って覚悟と価値観を伝えることからはじめましょう。

■　POの失敗に対する適切なセーフガードを用意しましょう。

　アジャイル開発ではソフトウェア開発の完成責任がPOにあります。　そして、ソフトウェア開発は極めて複雑で難しい作業なので、失敗することもあります。　一方、ウォーターフォール開発であれば、失敗の責任を受注会社に転嫁することができます。　良いソフトウェア開発を作りたいと強く思わなければ、責任の重いアジャイル開発を避け、責任が軽く自分が楽できるウォーターフォール開発を選択することも非難できないでしょう。　よって、アジャイル開発をPOが選択していくためには、アジャイル開発が上手く行かなかった場合でも、きちんと救済できる制度が必要なのです。
　ところで先にも述べましたが、POはビジネス・リーダと同様な判断を行います。　つまり、ステークホルダの事情の変化、競合企業による新サービスリリースなどの影響をダイレクトに受けるでしょう。　それらに起因するビジネス・リーダの方針変更を失敗と呼ぶのでしょうか？　アジャイル開発でも一緒です。　上手く進まない原因をきちんと分析し、サービスリリース時期の延伸や開発中止などの判断を適切に行わなければいけません。
　
・失敗原因例：　ステークホルダの計画を前提に進めていたが、ステークホルダの方針が変わってしまった。　予測不能だった。
・失敗原因例：　競合企業が新たなサービスを開始し、現在開発しているシステムの価値が大きく低下しまった。　予測不能だった。
・失敗原因例：　開発システムの根幹となる技術の困難さが具体的に判明してきた。　実際に試して判明した。　試すまでわからないことだった。

■　POの失敗に対しては、即応することでリスクを削減しましょう。
　
　開発の途中で上記のような状況が判明したらその時点でウォーターフォール開発では難しい方針変更を、アジャイル開発では翌日からでもすることが可能なのです。　もし、POからのそれらの悪い状況のエスカレーションが無く手遅れとなった場合には、そのPOはアジャイル開発の本当の進め方を理解していないか、社内の情報伝達に問題があった可能性があります。
　開発メンバからPOが信頼されなかった場合など、開発現場のリーダシップに関わる問題には、あなたが適切な救済をしていく必要があります。

■　「アジャイル開発をやりたい」、と提案してきた担当者を活かしましょう。

　あなたの会社の若手の担当者がアジャイル開発を実施したいと提案してきたとき、あなたはどうすべきでしょうか？　若手で情報処理スキルの高い人材にとって、アジャイル開発は普通のソフトウェア開発になっています。　大学時代の同期は、他社でアジャイル開発を推進して成果をあげているかもしれません。　あなたの会社がまだアジャイル開発を主流にできておらず、先に述べたあなたの覚悟と価値観があるのであれば、そのチャンスを活かして、人材を伸ばし、組織を変革していきましょう。　しかし、あなたがアジャイル開発に魅力を感じないのであれば、その人材があなたの会社の将来性を見限ったとしても、その判断は受け入れてあげましょう。　どちらがガラパゴスだったのかは時代が決めてくれるはずです。

■　「アジャイル開発をやりたくない」、と相談してくるPOや担当者もいます。

　アジャイル開発は、ウォーターフォール開発に比べて発注側の組織とPOに大きな負担を求め、責任を負わせます。　新しい事もたくさん学ばないといけません。　自ら、全体の状況を捉え、都度、最善を考え、責任をもって優先度を判断し続けなければいけません。　開発者とはコミュニケーションを丁寧に行って高いモチベーションを維持して開発を続けてもらわなければいけません。　発注側の担当者も発注先の開発担当者と対等に議論し開発を進めていかなければいけません。　さらに、・・・
　これらが耐えられないと申告するPOや担当者が出たらどうすれば良いでしょうか？　ウォーターフォール開発スタイルで実現できていた発注側が楽できるスタイル、決まった作法を繰り返すだけでそれっぽく進められた経験から抜け出すことができない担当者もいるかもしれません。　ウォーターフォール開発は全て消える訳ではないでしょう。　あなたは適材適所と育成のバランスを考えなければいけません。




2.4 アジャイル開発の不都合を理解する

■　アジャイル開発では動作するソフトウェアが早い段階で見えてきます。　しかし、それが商用リリースできるまでには、もっともっと時間がかかります。　

　ウォーターフォール開発で納品されたソフトウェアは一定の品質基準を満足していることでしょう。　しかし、アジャイル開発では、品質確保より前にPoC（Proof of Concept,概念実証版)としてリリースされ、使い勝手などの検証や試用を実施することになるでしょう。　それらのフィードバックを受けながら、その後に品質を高める作業を実施していくことになります。　よって、「動いた」と、「商用適用可能」の間には時期的な大きな時間差があります。　動いたのを見て、「すぐサービスを開始しろ！」と、間違った指示をしてはいけません。　誤解しないように注意しましょう。　

■　ウォーターフォール開発の方が適したケースもあります。

　全ての場合にアジャイル開発が向いているとは限りません。　案件のタイプがアジャイル開発に合っているか？　は考える必要があります。

・アジャイル開発価値より他の価値が重要な場合：
・経営幹部としてアジャイル開発に魅力を感じない場合。
・他社と競争する必要が無い場合。
・要求仕様が固まっていて、誰でもいいから安く作ってほしい場合。
・人命や重要社会基盤であって、早いサービス開始よりも高品質の保障が求められる場合。

　　・他社に開発保障を求めたい場合　（ただし受注会社が存在する前提）：
・とりあえず予算内・期間内で完成することが重要である場合。
・自らの完成責任を回避したい場合。 
・金でリスクを回避したい場合。

・準備不足：
・自社の価値観をアジャイル開発適合に変えることができない場合。
・開発責任を委ねられるPO人材がいないし、育成もできない場合。

・コミュニケーションが上手く行かない場合 （コミュニケーション・ロスが大きく、ドキュメントベースが効率的な場合）：
・ソフトウェア開発規模が大きくチームが10人を超える場合。（適切なチーム分割で回避するケースあり）
・オフショア開発や自社への持ち帰り開発など、別ロケで開発しなければならない場合。（適切なツール使用で回避するケースあり）

■　そもそも「何を作るか」が決まっていない場合には、どんな開発スタイルを採用しても開発は成功しません。

　最終的に、作りたいソフトウェア（ゴールイメージ）が決まっていなければ、開発は失敗します。　製造請負契約であれば、たとえ見積り仕様がパワポ１枚であってもその失敗責任は（その仕様で見積りを出した）受注者が負いますが、アジャイル開発の場合には自社で負うことになります。　失敗に対して、短絡的に「アジャイル開発は駄目だ」、「ウォーターフォール開発に回帰せよ」と指示する前に、失敗の原因をきちんと分析してください。　情報はPOからも集めますが、全ての情報が得られない場合もあります。　あなたの情報収集能力と反省も問われるかもしれません。　まずは、あなたゴールイメージの具体化に対して、あなた自身がPOにどう協力できていたのかを考えるのも一つの原因追求アプローチです。　きれいなPowerPoint資料だけで、上手く動作するソフトウェアは作れません。
























3．　発注側　POの心得




3.1 プロダクトオーナ(PO)の責任と権限を理解し納得する

■　ウォーターフォール開発は、発注者が「受身」でも一応完成します。

　従来のウォーターフォール開発のほとんどは製造請負契約とセットです。　あなたが発注仕様書を漏れなく書くことができて、かつ、予算内・期限内で受注してくれる会社が見つかり製造請負開発契約を結べれば、あなたの勝ちです。　後はあなたが不在であっても、納期には仕様を（最低限度に）満たす納品物が得られます。　仕様が十分に書かれていれば、満足できるソフトウェアの可能性だってあります。　仕様解釈のズレの発生を避けるために、丁寧なレビューを実施することはあるとしても、あなたは常に受身で構いませんでした。　開発会社から提出された進捗報告を眺め、予定と実績の乖離確認を行い、もし遅延していれば遅延回復策を提案してもらって吟味することだけだったかもしれません。






図3-1　POはアジャイル開発の中心にいる


■　アジャイル開発はPOが「主体的」でなければ完成しません。

　一方、アジャイル開発では、図3-1のようにPOが中心に位置します。　あなたが仕様も実装も積極的に指揮していくことになります。　それを可能にするために製造請負契約ではなく準委任契約を締結しているのです。　あなたの期待に近いものが作れるように指揮できる代償として、発注側のあなたがソフトウェアを完成させる責任を負うのです。　あなたの判断が失敗すれば、ソフトウェアは完成しないかもしれません。

■　POがソフトウェア完成の責任を負うことを納得しなければいけません。

　ソフトウェアを完成させる責任は、明確なゴールイメージがあり、話のわかるステークホルダが相手で、質の高い開発メンバを集め、良いチームを作り、適切な期間をかければ、それほど困難ではないかもしれません。　しかし、ゴールがはっきりせず、ステークホルダが信頼できず、頭数だけのメンバを集めて、短い納期に間に合わせる開発だったら、誰がやっても失敗するでしょう。　POになる前に、成功のための条件をどの程度満たしているか、現在満たされていない条件をどうやって満たしていくか、を責任者の視点で考えるべきでしょう。　そして経営幹部に不足する条件を満たすための支援を要求しなければいけません。　もし、あなたの価値観がリスクと責任を回避することを優先するなら、POを受諾しない、もしくはアジャイル開発を採用しないのが懸命だと思われます。　また、以下の迷いが先行して主体的に行動できない場合にも辞退すべきかもしれません。

・タイムリーにステークホルダと調整して優先順位を決めることは面倒なので避けたい。
・現場の悩みに付き合って、都度、方針や優先順位について判断していくのは面倒なので避けたい。
・たくさんのレビュー依頼を裁くなど、知力・体力に限界を感じる。
・あなた自身が開発するもののゴールに納得できない。　
・開発するものが全くイメージできない。　何を開発すればいいのかわからない。

■　責任の大きさに伴う権限が与えられていない場合、POになるのを止めておきましょう。

　ステークホルダとの調整の実効的な権限や、納品物を検収する実効的な権限などを、自ら持っていることが重要です。　権限自体を持っていなくても、権限を持った上司との連携作業で進められるなら大丈夫かもしれません。　しかし、たとえば全くステークホルダと調整する権限が無い担当者がPOになる場合には、失敗するリスクは非常に高くなるでしょう。　検収権限がない場合には、自らの判断の前に都度、その検収権限者と調整しなければ、責任ある判断ができないでしょう。　POになる前に経営幹部に必要な権限は要求するべきです。

■　POはアジャイル開発のSPoFです。　自らの健康を維持しましょう。

　POはアジャイル開発の中心です。　POが不在になればアジャイル開発が停止するリスクがあるSPoF (Single Point of Failure, 単一故障点)です。　健康維持には十分注意しなければいけません。　

■　複数名がPOチームを構成することも可能です。ただし、簡単ではありません。

　POが1名だけの体制にはプロジェクトの可用性（継続性）として問題があります。　そこで2～3名でPOがチームを組むことが考えられます。　しかし、容易ではありません。
　このとき注意すべきは、各PO間での情報のズレ、判断のズレを最小にすることです。　複数の船頭が発生すると逆にアジャイル開発は混乱してしまいます。　開発メンバにも主体性が生まれなくなります。　POチームとして判断基準と優先順位を合わせ、開発メンバから信頼されるようにならなければいけません。


3.2 発注側幹部がアジャイル開発の価値観に納得していない時

　　1章で述べたように、アジャイル開発は発注側幹部の意思から始まるのが正しいスタイルです。　しかし、不幸にも逆順となることが良くあるでしょう。　なぜ、逆順になるのでしょうか。

■　PO自身がアジャイル開発を実施したいと望むのは、開発のスピードアップやコスト低減を求めたときです。

　PO自身がアジャイル開発を望むときとは、どんな時でしょうか？　一つは、情報処理スキルが高い人材がアジャイル開発を体験し、そのスピード感が忘れられないときではないでしょうか。　もう一つは、ウォーターフォール開発の変更対応の弱さやスピード感の無さ、納品物の費用対効果の悪さ等に失望したときかもしれません。　ウォーターフォール開発では受注側が全てのリスクを負うため、見積額はリスク料金を含んだ高いもの、開発期間もリスクを見た長い期間になります。　また、当初の仕様で十分語りきれなかった点があると、納品されたソフトウェアと期待とのズレが非常に大きくなるケースもあるのです。　自分でチームを作って自ら指揮して作った方が、安く良いものが作れると思うことがアジャイル開発を実施したいと思う強い動機となるでしょう。　そのほか、競合社の進め方を知った時ということもあるかもしれません。


■　社外と競争する必要がない組織であれば、組織の幹部がアジャイル開発のメリットを求めません。

　アジャイル開発の変化への対応のメリットは、インターネット上のサービスで競争するような企業が最大限に享受します。　しかし、世の中には異なる価値観の組織も多くあります。　年度内に与えられた予算の中で、確実に買う、ことが重要な場合だってあるはずです。　そんな組織にアジャイル開発はそもそも適合しません。

■　社外と競争し情報システムが競争力の源泉となる企業なら、幹部にアジャイル開発という技の知恵を授けましょう。

　システム開発の競争力が上がること、それは幹部にとっても企業の競争力を左右する重要な情報のはずです。　幹部がもしアジャイル開発を知らないのであればその手法の情報を提供すべきです。　さらに、深く理解してもらい、制度の整備等も合わせて進める権限も含めて理解を得ていきましょう。

■　企業の幹部が価値を理解できなかったら、競合他社の成功を示して、気づきを待ちましょう。

　インターネット市場でサービス競争する会社の幹部に、競争力を向上させる手法がもし魅力的に響かないのであれば、その会社は真の競争をしていないのかもしれません。　もしくは幹部にはもっと優先する他の価値観があるのかもしれません。　そんな中で、あなただけが完成責任というリスクを負うか否かは、あなたの自身の判断です。　少なくとも、最初から大きなアジャイル開発を実施することは避け、小さな成功を積み重ねて実績を積んでいきましょう。　また、契約としては派遣契約を使って技術者を集め、内製するのがわかりやすいでしょう。　結果として、類似の他のウォーターフォール開発と比べると良いものが作れるでしょうし、その差をアピールしていくことも良いでしょう。　また、競合企業等がアジャイル開発で成功している事例については情報として伝えて行きましょう。　あとは、使命感を持って企業を変える努力をするもよし、もっと力を発揮できる環境を探すもよし。　幸運を祈るだけです。



3.3 ゴールに対して、価値のある部分をまず動かして全体の目処をつける

■　ゴールを決めるのはPOの責任です。
　
　アジャイル開発では、開発メンバにゴールを理解してもらって協力してもらわなければいけません。　万が一、ゴールをPOが正しく理解できていないのであれば、安易に開発をはじめてはいけません。　ゴールを明確にするためには、プログラム開発以外にもっと重要なことがあるかもしれません。　一旦、開発が動き始めてしまうと、それだけで周囲を安心させてしまうかもしれません。　手段を目的化しては駄目です。　何かやっている感じの演出も駄目です。　開発の前にゴールを明確化する調査などの営みをしっかり実施しましょう。

■　ゴールまでの計画を見積る責任も、発注側のPOです。

　　アジャイル開発で、ゴールを決め、ゴールに向けての全体スケジュールを計画し、それに必要な体制規模と期間を決めるのもPOです。　当然、ウォーターフォール開発と同様に精度高く短時間で見積る方法は存在しません。　アジャイル開発において、期間も体制も見積れないのに完成責任を果たす最大の手法は、重要な部分の解決を小さく実施して目処をつけることを最優先する、ということです。　解決すべき重要な部分とは例えば以下のようなものです。

・プログラムの主要機能の実現方法の目処がついていない。
・期待される性能を満足できるか見通しが全く無い。
・プログラムの核として利用するパッケージ・ソフトウェア／クラウド機能／OSS（Open　Source Software）の理解が十分ではない。
・他システムとの連携方法の理解が十分ではない。
・期待するユーザインタフェースの実現方法の目処が立っていない。
・プログラムの中心となるアルゴリズムの目処が立っていない。
・プログラムのアーキテクチャが決まっていない。

　解決すべき重要な部分の見通しが不明な時点で、それを解決せずに見積っても度胸（KKD法のD）で見積ったとしか言いようがありません。　最初にその部分の解決に目処をつけましょう。　そして、その結果を受けて見積りの精度が向上するかを、チームの皆と議論してみましょう。　次に重要な部分があって、そこを解決しなければやはり全体の達成が不透明かもしれません。　そのときは、そこを解決していきましょう。　重要な部分が明確でない場合には、中核となる機能を短期間で簡易に試作してみましょう。　それによって、どこに難しさがあるのかが見えてくるはずです。　いくつかの重要な部分について解決の目処が付くと、後はそれらの経験とこれまでのチームメンバの経験を合わせて見積りができるタイミングがいつか訪れるでしょう。　そこに、残るリスクに見合った期間を足せば、やっと皆が納得できる見積り計画の完成となります。　見積った計画を実行していく中で新たな課題が出てきたら、計画は素早く見直しましょう。　

■　基本設計を模索するための初期プログラムコードは、無理に残さないことを原則としましょう。

　基本設計を明確にするために、一旦、動作するものを組み上げてみることをすることは、ドキュメントを眺め続けて設計の精度を上げるよりも効率的なものになります。
　しかし、注意点があります。　基本設計を決める際に作ったプログラムコードは再利用可能でしょうか？　使える場合もありますが、無理に使わず捨てるものだと思いましょう。　もったいない病、ライン単金病、手段目的化病等に負けてはいけません。　現代のシステム開発では、プログラムコードよりも良い設計の方が圧倒的に価値が高いのです。　優先度判断ができない姿勢、熟慮せずに二兎を追う姿勢は避けましょう。　同様に、基本設計を試行錯誤するプログラムコードにUTを何も考えずに実施する等のバランスの悪さも避けなければいけません。

■　未確定部分があれば、課題を分離して、仮置きして全体を進めることが重要です。

　アルゴリズムや詳細方式が決まっていない部分があれば、その部分に対して簡素で交換可能なインタフェースを用意して、一旦、最も単純・原始的なアルゴリズム・詳細方式を使うことにして、全体を進めましょう。　全体を通すことで、さらに重要な問題が無いかを探っていきましょう。　


3.4 動いたら、ステークホルダに見せ、アジャイル開発の価値を活かす

■　重要な部分が動き始めたら、開発スケジュールを心配する経営幹部やステークホルダに見せましょう。

　重要な部分の見通しが付いて、一発動くシステムにできたら、開発スケジュールを心配する人々にも見せていきましょう。　それによってプロジェクトは一旦、計画安定状態に入ることができます。　万が一、ここで当初のプロジェクトの想定期間内に終了しないとわかったとしても、重要な部分については動作したことを示し、残り期間の見積りも度胸だけではないことが示せれば、後は純粋な追加投資対効果の判断だけになります。　少し遅れ気味であっても、重要な部分が動くシステムを関係者に見せることによって、皆が現実的なスケジュール感について理解してくれるでしょう。

■　サービスのゴールを決める人々に、早く使ってもらって、大きな意識ズレがないか確認していきましょう。

　この営みがアジャイル開発で最も重要です。　アジャイル開発では、動くものを早く見せて／使ってもらって、意識ズレ・解釈ミス等を早期に検出し、対処していくこと（図3-2）が極めて大切です。　ウォーターフォール開発との本質的な違いはココにあります。　この動作するシステムを見て触ることを通した、エンドユーザ側との早期のそして細やかな仕様あわせが、システムの完成度と満足度を圧倒的に高めていきます。　ドキュメントベースの対話かつ初期に一度決めことを守り続ける硬い進め方で製造されたシステムでは決して得られない効果があります。






図3-2　ウォーターフォール開発とアジャイル開発のステップ比較
（※ 縦軸・横軸が各図で異なる点に注意）

3.5 その後も「動くものを作る」を忘れずに、改善のサイクルを回す

■　重要なものから先に実施することをスパイラル開発でも忘れないようにしましょう。

　ステークホルダからの要望も含めて、重要なところから順に改良し拡張していくスパイラル開発を進めましょう。　ステークホルダの要望は全て直ぐに反映するというのではなく、あくまでも重要なものを優先度に従って解決しましょう。　
　次回の改善版はどのタイミングで、どこまで改善し、どう見せるか、についてもPOが悩むべきポイントです。　リリース予定日とソフトウェアの完成度のバランスを見つつ開発を進めていきましょう。　やりすぎると重複するコメントだけが集まってコメント対応に忙殺され、開発が全く進まなくなるケースもあるので注意が必要です。

■　アジャイル開発とは、動作するプログラムによるコミュニケーションへの変化です。

　アジャイル開発では、「コミュニケーション」が変化します。　図3-3にウォーターフォール開発とアジャイル開発でのコミュニケーションの違いを示しました。　ドキュメントによって意思疎通をはかり開発を進めたウォーターフォール開発に比べ、アジャイル開発では動作するプログラムを使って意思疎通をはかります。

図3-3　ウォーターフォール開発とアジャイル開発のコミュニケーション比較

　ドキュメントが不要だという極論は困ります。　相談や議論をするのにFace to Face（F2F）が大切です。　一方、以下のようなケースのためのドキュメント作成と整備は大切です。　

・翌日への作業チケットの引継ぎ。（明日、事故であなたが入院するかもしれません）
・新しく参入するメンバや将来の機能拡張と維持管理メンバへの引継ぎ。（APIやテストに関するドキュメントなど）


3.6 期待されるのは普通のビジネス・リーダシップ

　POは、ウォーターフォール開発の発注者よりは苦労することになります。　しかし、あなたに求められている「優先度の高いところから先に実施する」というこの進め方は、情報処理分野に限ったものではなく、現代のビジネス・リーダに求められている普通の考え方です。　情報処理技術の理解とビジネス・リーダシップの発揮がPOの役割です。



　逆に言えば、決められない、伝わらない、信頼できない等、リーダシップに欠けるPOの元でのアジャイル開発は失敗してしまいます。
　なお、リーダシップ論の中には、古典的軍隊をモデルとしたものも存在しますが、それはアジャイル開発で求められるリーダシップではありません。　現代では、軍隊さえ現場の主体的な判断を求めるスタイルに変わりつつあります。　アジャイル開発必要なのは、共通のゴールに向けてチームメンバに主体性を発揮させることを目指すリーダシップです。　（巻末の補足5）


3.7 ウォーターフォール思考・姿勢の注意点

■　請負開発における発注者経験に基づく姿勢と判断は、アジャイル開発を失敗させる方向に誘導します。
　
　ウォーターフォール開発であってもアジャイル開発であっても、発注者側が相応の努力をしなければ、期待する良いソフトウェアを作り上げることは難しい作業です。　しかし、ウォーターフォール開発の場合には、完成と納品は受注側責任です。　発注側はお金を出して買うという姿勢が強く出ると、「予定と実績の乖離確認を行い、もし遅延していれば遅延回復策を提案してもらって吟味する」　という単純作業だけで、ソフトウェア開発を指揮する気分を味わうことも可能でした。　万が一、あなたがその世界からアジャイル開発の世界に変わるのであれば、大きな違いを感じるはずです。　たとえば、以下を注意しなければいけません。

・あなた自身が計画を見積っていますか？
・開発メンバ一人ひとりのモチベーションを考えていますか？
・Win-Winを志向し、対等なコミュニケーションをしていますか？
・ドキュメント完成の前にFace to Face（F2F）で相談していますか？

　ウォーターフォール開発であっても、優秀な発注者はそれなりに実施をしています。　
しかし、俺様は発注側という姿勢がにじみ出て行くと、成果物としてソフトウェアは劣化していきます。　ウォーターフォール開発に慣れた人は、契約種別の違いから来る進め方の違いを再度、理解しましょう。　製造請負契約ではありません。　極論すれば派遣社員を使った内製開発に近いものだと思うことです。　（※ただし、準委任契約と派遣契約の違いにも注意してください。　巻末の補足4）

■　アジャイル開発では、工程計画が必要な場合にはPOが責任をもつことになります。

　工程計画の作成責任はPOにあります。　もちろん、現場メンバに相談し、進捗状況や今後の見通しを聞くことは可能です。　しかし、POであれば、現場の状況とメンバを丁寧に観測して自らのチームの生産性の認識を持つ必要があります。　さらに、今後、あなた自身が現場に対してどれくらいの指示（変更）をしていくかを予想して、全体の計画を見積る必要があります。　アジャイル開発において現場の開発メンバが今後のあなたの判断、およびその背後にいるステークホルダからの要望等を予測するのは困難です。　間違っても、「計画を出せ！」、「出した計画通り進めろ！」といった指示は止めましょう。　アジャイル開発では受注側が開発計画をコントロールすることは本質的に無理なのです。　たとえ、それが穏やかな言い方であっても伝わるものです。　あなた自身がソフトウェア開発を推進し完成させる責任を理解し、計画して、仲間に手伝ってもらいながら成功を目指すという姿勢を示す必要があるのです。

■　発注先の開発メンバを、仲間だと思って、対等に接しましょう。　仲間の積極的な協力があってこそ、ソフトウェアは完成するのです。

　１章で示したソフトウェア開発の現実【優良ソフトウェア開発原理】を理解しましょう。　担当者一人ひとりをできるだけ理解し、対等な姿勢でコミュニケーションの質を高め、モチベーションの低下が発生しないように常に配慮しましょう。



■　ウォーターフォール開発では重要だった作法・形式よりも、実態に応じた都度の優先順位の調整が重要になります。

　ドキュメント化してレビューという作法の前に、まずは関係者で集まってF2Fで議論するという姿勢の方が重要です。　無駄なドキュメントの作成は避けるべきです。　しかし、試験や維持管理等を考えて作るべきドキュメントもあります。　全てのドキュメントを否定することはありません。　取捨選択が重要です。　ドキュメントの代わりに自動リグレッション・テストの整備を考えるべき時もあります。

　



3.8 コミュニケーションは大切、・・・相談を中心にする

　アジャイル開発スタイルにおいて、コミュニケーションは極めて大切なので、その詳細は次章に改めて示します。　しかし、その前提として重要なポイントがあります。

　■　派遣契約では、POが派遣社員に直接作業指示を行うことができます。

　しかし、・・・

　■　準委任契約（および製造請負契約）でPOは受注側開発メンバに直接作業指示をしてはいけません。　

　　必ず、受注側の作業管理責任者を通じて作業指示を行うことになります。　どうすれば良いでしょうか。　良質なPOによるアジャイル開発で、上から目線の指示が発生することはありません。　双方からの相談がコミュニケーションの中心スタイルとなります。　相談については制限はありませんので、十分に相談した後に、作業管理責任者と合意し作業指示としていきましょう。　たとえば、チケット管理システムにおける優先順位をもとに作業を割り当てていく進め方、チケット目標期限を必達期限とはしない進め方（＝実態を優先する進め方）、などについても作業管理責任者と相談し合意していきましょう。　いずれにしても、POとして信頼され、良質な関係があり、皆のモチベーションが高く維持できている場合に有効な進め方になります。 （巻末の補足4参照）



4．　コミュニケーションの本質を考え直す




4.1　コミュニケーションには、双方の努力が必要
　　
■　コミュニケーションは、そもそも難しいという事実を認めましょう。

　コミュニケーションでは、「簡単には伝わらない」のが標準状態です。　なかなか理解されないからといって憤慨してはいけません。　そもそも難しいことなのです。　あなたの伝え方が悪い場合だってよくあるのです。　そのときは、あなたのコミュニケーション・スタイルを変えない限り、質の高いコミュニケーションには至らないでしょう。
　　






■　伝わらないのが普通だから、何度も伝える努力をしましょう。

　　大切なことは、何度も、伝える努力をしましょう。　そして努力をするのは、伝える方、伝えられる方の双方となります。　
　それを避けるために「全てドキュメントでやりとりしよう」とする開発スタイルもあります。　たしかに主語や目的語など自在に省略する日本語では文書にしてみることも大切です。　さらに製造請負契約では、受注側企業が、「言った」／「言わない」の法廷闘争に備えるためにもドキュメントは重要だったでしょう。　しかし、この考えは準委任契約を前提とするアジャイル開発では無駄になります。

■　相手の理解の度合いを確認しましょう。

　相手の意図を自分が正しく理解したかを、質問を発することによって確認しましょう。　逆に相手側の理解の度合いについても、具体例等を質問することで確認するのも一つの手段です。　一人ひとりの理解度を確認しないといけません。

■　現物を見て、ホワイトボードを使って、Face to Face(F2F)で話しあうのが最強のコミュニケーション手段です。

　　対面でホワイトボードなど使って話すFace to Face（F2F)が、やはり最強・最速です。　特に、問題発生時は、集まってホワイトボードを囲む姿勢が大切です。　文書・図・例示・比喩・擬似プログラムなど、多様な伝達手段・表現を駆使しましょう。　適切な例を示しましょう。異なる3つは示して、解釈の幅を伝えましょう。


■　動作するものを見ながらコミュニケーションすると意図が的確に伝わります。

　ドキュメント上で調整するよりも、実際に動作するものを見ながら調整することが双方にとって分かりやすいコミュニケーションになります。　アジャイル開発では、この特性をステークホルダとのコミュニケーションにも活かしていきます。

■　コミュニケーションは、相手にもこちらの話を聞きたい、と思ってもらうことが重要です。

　聞く側も、話す側の意図を正しく理解したいと思ってもらうことが大切です。　そのためには、話す側の姿勢も大切です。　

■　相手に合わせて「聞く」ことが優先されます。

　何か伝えたいとき、まずは話しきりたい、という気持ちは十分わかります。　しかし、途中で割り込まれる質問や意見に対して、「聞く」ことが優先されるということを忘れてはいけません。　コミュニケーションは双方向のやりとりです。　一方的に言い放つ姿勢を避けなければいけません。　双方が「話す」ことを優先する場合、コミュニケーションの成立が危ぶまれます。　片方だけが話す場合にも注意が必要です。　双方が参加するコミュニケーションにするには「聞く」姿勢が相手に伝わり、相手側に話が伝わる人だ、相談できる人だと思ってもらえることが大切になります。



■　用語の混乱に気づいたら、速やかに再定義しましょう。

　最初に使っていた用語に多義性があった場合には、それによって現場が混乱します。　誤解なくコミュニケーションができるように用語を再定義して、早期に現場の混乱を防ぎましょう。



4.2 相手を知る＝相手の人物モデルを自分の中に持つ

　コミュニケーションを効果的に行うためには、相手に合わせることが重要です。　相手に合わせるためには、相手を知らなければいけません。　では、相手を知るということはどういうことでしょうか？



それは相手の人物モデルを自分の中に持つことだと思います。　人物モデルは、以下のような情報で構成されるでしょう。　

・状況
・価値観
・思考法　
・期待
・その他いろいろ（趣味、志向、特技、人柄、家庭、・・・）

　相手の名前も知らないという状況でのコミュニケーションが、どれだけ一方的なのかを理解できるでしょうか。　アジャイル開発を上手く運営するノウハウの一つとして、最初に飲み会やランチ会を実施するというものがあります。　これはチームの各メンバの人物モデルを相互に作り合うことに非常に役立ちます。　相手の趣味や家庭を知ることも人物モデルの質を上げることに役立つことがあります。
　
■　コミュニケーションが苦手という担当者もいます。

　日本では文系・理系という区別があり、その決定（自己判断理由）の一つにコミュニケーションが苦手であることを理由にしてきた場合があります。　また、プログラマという職業を選択した際にもコミュニケーションが苦手という理由があったかもしれません。　メンバにはそういう気持ちの人も含まれているかもしれないし、あなた自身がそうかもしれません。　
　けれども、アジャイル開発のメンバとして活躍するにはコミュニケーション・スキルが重要です。　・・・と言っても、コミュニケーションとして単に口数が多いこと、難しい日本語表現を使いこなすこと、を求めている訳ではありません。　まずは、相手に興味を持って人物モデルを持ち、相手を理解していくというコミュニケーション姿勢を持つようにしましょう。　コミュニケーションは徐々に成長するものです。　少しずつ相手の人物モデルへの対応について成功体験を積み上げていきましょう。

■　あなたの情報・判断理由を伝えて、あなたの人物モデルを正しく持ってもらいましょう。

　各判断に対して、あなたの判断の理由（状況、価値観、思考法、期待）などを含めて伝えていきましょう。　皆が正しい判断を出せるだけの情報を適切に与えて、できるだけ自立性を高めてもらうように、あせらず徐々に導きましょう。　小さい成功のループを何度もまわすことが近道です。




■　あなたの思考が、論理的・合理的であり、一貫性を持っていると、相手は早く理解してくれます。

　思考の論理性・合理性は、コミュニケーションにも表れます。　論理性があれば、前提や結論などをシンプルに語ることができます。　コミュニケーションが苦手という原因の中に、論理的な思考が苦手な場合も含まれますが、その場合には、会話以前に論理的な思考について習熟していきましょう。

■　話をする際は、前提が合っていることをまず確認しましょう。

　相手が今、どんな文脈にいるかを考えてみましょう。　結論を先に述べるのは正しいスタイルですが、そもそも話の前提は合っているでしょうか。　こそあど言葉（あれ、これ、それ、どれ）は、受け取る人の状況で誤解されるかもしれません。　議論の最初はできるだけ具体的な言葉・用語を使って、前提を合わせることを意識してコミュニケーションを進めましょう。


4.3 重要なことを先に。段階的に詳細化し相互理解する

■　重要なことを最初に短く伝え、その後に詳細説明・質問・回答等を組み合わせて理解を深めていきましょう。

■　それは普通のビジネス・シーンのコミュニケーション・スタイルと一緒です。

　「重要なことを最初に短く伝えること」、「前提を伝え、報告なのか／相談なのか、を伝え、　まず結論を言うこと」、その後、「相手の反応を見て、詳細説明／質問／回答等を組み合わせて、相互に理解を深めること」、これらは普通にビジネス・シーンで求められるコミュニケーション・スタイルです。　その際には相手の人物モデルを使いましょう。　TPOは大切です。 たとえば、相手が5分後に会議があると表明しているのに、回りくどく詳細から話すのは良くありません。　ネガティブな対応をされてしまうでしょう。　一方で、そんな状況であっても商用サービスの停止などの緊急情報であれば、相手の価値観は状況の速報を受けることを、会議より優先するでしょう。


4.4 モチベーションを上げるために （PO視点）

　　コミュニケーションの狙いはいくつかありますが、モチベーションを維持し、上げることにつなげることが重要です。

■　モチベーションが高いと、積極性の向上、主体性の発揮につながります。

　モチベーションを上げると、開発に積極的に協力してもらえるようになります。　モチベーションが高く、技術スキルの高いメンバによる開発は、非常に前向きで強力なものになります。
　アジャイル開発の弱点の一つとして全ての判断がPOに集中し、POが忙殺されてしまうことがあります。　メンバの主体性が高まると、その状況を緩和することが可能になります。　

■　褒めることが出来ていますか？ 感謝することが出来ていますか？

　褒めることは、モチベーションを上げます。　その判断が良かった・正しかったことをフィードバックすることで、主体性を高めることにつながります。　感謝することもそれと同様です。　コミュニケーションは、人によっては面倒なことです。　ドキュメントを書いてフォルダに置くだけにしたいのかもしれません。　そんな中、主体性を発揮して相談してくれたことに対して、ぜひ、日常的に褒めて感謝する関係を作り育てていきましょう。


■　モチベーションを下げることは一瞬で起こります。　

　モチベーションを上げるのが徐々にしかできないのに対し、下げることは一瞬でできてしまいます。　以下のような状態が発生すると、POへの信頼感が低下し、モチベーションが下がります。　コミュニケーションを丁寧に実施して回避していきましょう。

・Win-Winの意識がなく、常に上から目線で指示をする。　
・自らを省みず、一方的にチームメンバの責任を問う。　
・予実管理（予定と実績の乖離分析）が大好きで、乖離を責める。
・急がせておきながら、話が長くミーティングが大好き。
・PO自身に主体性がなく、いつも他人やステークホルダの言いなり。
・チームの現状を知っていながら、ステークホルダと勝手な約束をしてくる。
・現場が納得できない計画で進めようとする。
・優先順位の決定理由や変更理由が伝えられず、これまでの作業を無駄にする理由が理解できない。
・皆が何のために作業しているのか（ゴールが）わからなくなっている。
・大きな声で怒鳴り散らすだけで解決に一切役立たない。

■　方針変更や仕様変更の際には特に丁寧に理由を説明しましょう。

　アジャイル開発では仕様の変更や優先度変更が発生します。　場合によっては朝礼暮改のように見えることもあるでしょう。　POの信頼が揺らぐのは防がなければいけません。　方針変更や仕様変更の際はその理由や背景の説明を積極的に行い、その必然性や重要性を理解してもらえるように尽くしましょう。


4.5 チームの質も上げよう （PO視点）
　
チーム内でのコミュニケーションが上手く成立していると、チーム力が高まります。　

■　チームとしての技術的能力を上げるコミュニケーションを促しましょう。

　コミュニケーションはPOと開発メンバとが行うだけではありません。　開発メンバの間でも積極的な技術相談等が成立するように誘導し、活性化を見守らなければいけません。　人毎に偏る専門性が上手くチーム全体で生かせればチームとしての能力が一層向上します。

■　チームとしての可用性を上げるコミュニケーションを促しましょう。

　ある開発メンバの作業が遅れた時や突然風邪で休んだ時、残りの開発メンバが主体的にそれをフォローできる体制になることが理想です。　そのためにも、自分の状況はPOだけに伝えるのではなく、チーム内に広く伝えるように促しましょう。


4.6 悪い情報を素早く収集する仕組みを作って、大失敗を回避する （PO視点）

　アジャイル開発においてPOが判断をする際に、正しい開発現場の情報を知っていることが重要です。　特に、悪い情報には早く対応しなければいけません。　POの責任ある良い優先度判断は、それらの情報の上に成立します。

■　悪い情報・問題は、早めに気づいて対処した方が楽です。

　悪い情報・発生した問題についても解決の最終責任はPOです。　そうであれば、問題は、早めに手を打った方が選択肢が多く、楽に解決できる可能性が高まります。　

■　悪い情報ほど、PO自らが早く気づくように努力しましょう。

　悪い情報ほど、早く報告して欲しいとお願いします。　しかし、悪い情報を報告することに慣れていない担当者や、以前悪い情報を報告した際に感情的な叱責を受けた担当者等がいれば、その願いはなかなか理解されないかもしれません。　そもそも心理的にも抵抗感があるはずです。　
　しかし、「現場の悪い情報がなかなか上がってこない」と、文句を言ってはいけません。　悪い情報がないかをPOは現場に探しに行かなければいけません。　積極的に検出する質問をしなければいけません。　これを「現場にPingを打つ」と言うこともあります。　待ちのPOではなく、自らが現場の担当者に対して、「心配事ない？」、「課題は無い？」、「待ちになっている作業はある？」、「無理にでも最も悪い情報を言うとすると、どんなこと？」と、できれば日々確認していきましょう。

■　悪い情報の速報には「感謝」を表明しましょう。そして一緒に解決しましょう。

　悪い情報が早く上がる仕組みを実現するためには何をすれば良いでしょうか？　悪い情報が上がっても冷静に受け止めて、粛々と紳士的に対処されることを示す必要があります。　悪い情報を責任者に伝えることは、慣れていない人にとっては苦痛なはずです。
　悪い情報を、素早く共有してくれたことについては、開発メンバ全員の前で「感謝」を示しましょう。　悪い情報は、情報が確定しないうちにでも速報でもらえるようにしましょう。　情報が不正確であっても叱責してはいけません。　どこまでが事実で、どこからが推測なのか？それとも不明なのか？情報源はどこか？等を確認し、不足する情報について更に継続収集と精度の向上を依頼するか？あなた自身が直接事実確認に動くか？などの判断を行っていきましょう。

■　次回以降も、情報が素早く入ってくることを奨励する態度が大切です。

　絶対に、不正確な情報を報告したことを叱責してはいけません。　まずは「感謝」です。　さらに、POが一緒に解決してくれることを示す必要があります。　それらを、続けることによって、各担当者は安心して悪い情報を報告できるようになります。
　世の中には、悪い報告に対して、紳士的ではなく激情的に反応するリーダもいたと思います。　そういう人がPOの場合、プロジェクトが大失敗する前に、アジャイル開発の採用はやめた方が良いと思います。


■　報告が遅れた場合には、その理由を聞き、次回から早くなるように改善しましょう。

　期待より報告が遅い場合には、その理由を確認し、次回からもっと早く報告できるような判断基準の変更を合意しましょう。　そもそも慣れていないのであれば、徐々に改善するように誘導しましょう。

■　正直なチームの文化を築いて、信頼されるリーダになりましょう。

　POも神ではありません。　予測を含んだ判断では間違えることもあるでしょう。　そのときは誤魔化さず素直に反省する態度を見せて、自らが正直なチーム文化を築いていく姿勢を貫きましょう。　他人に厳しく自分に甘いリーダでは、決して信頼されることはありません。

■　チームに対する自分の判断ミスは、公表し、模範となる反省の態度を見せましょう。　

　　同様に、あなた自身が、悪い情報をできるだけ早めにステークホルダに共有する姿勢を持つことも、ステークホルダとの信頼関係を強化することに役立つでしょう。　正直が開発チームの文化であることを示しましょう。


4.7 ウォーターフォール型コミュニケーションの悪癖

■　発注側は受注側のメンバと対等なチーム・コミュニケーションを実現しましょう。

　ウォーターフォール開発で育った人材で、発注側が上、受注側が下という意識が強く残っている場合、アジャイル開発ではコミュニケーションの質を下げてしまうことがあります。　相手のモチベーションを常に意識し、理解度（言った、書いた、ではなく、伝わった）も確認して進めなければいけません。

■　「まずは、報告書としてまとめさせてください」と言って、時間をかけることは望ましくありません。　

　報告書としてまとめる前に、するべき会話がきっとあります。　スピードアップのために、合意してから記録するスタイルを目指しましょう。

■　受注側は、端的に素直なミュニケーションを実施しましょう。悪い情報も素早く共有しましょう。

　お客様を刺激しない曖昧なコミュニケーションは駄目です。　端的に伝える努力をしましょう。　遠慮して丁寧語を使いすぎて、結局、何を言いたいのかわからない会話は駄目です。　「はい」は、「Yes」、「正しい」、「同意」に使うべきです。　「やるのか」、「やらないのか」、「情報不足で判断できないのか」も曖昧では困ります。　「できるのか」、「できると思っているのか」、「可能性をチャレンジしてみるのか」、「できないと思うけど仕方なくやるのか」、「やることに反対なのか」、「理解できないのか」についても端的に伝えるべきです。
　お客様にとって耳障りな情報であっても開発プロジェクトにとって悪い情報は速やかに伝えなければいけません。　お客様のゴールや価値観は意識しつつ、チームメンバとして対等な関係で議論・提案する姿勢が必要です。




5．　現場でのアジャイル開発スタイル （PO実践編）






5.1 技術者を集める

　良いソフトウェアを作るために、1章で示した【優良ソフトウェア開発原理】が重要です。　優秀な技術者を集めて/育てて、チームを作り、高いモチベーションを実現し、持続させていかなければいけません。


■　良い技術者を集めることが重要です。 

　チームメンバに期待する能力／意欲／姿勢、条件にはどんなものがあるでしょうか？　以下に例を示します。

・優秀なソフトウェア技術力（設計～コーディング・試験まで全て）
・相手に理解してもらえるコミュニケーションの基礎的な能力
・開発システムへの興味とモチベーション（意欲）
・POとの協働姿勢、素直で正直
・積極性・提案する姿勢
・専念できる（他と兼務しない）

図5-1　３つの大きな期待

■　良い技術者はチームとして育てていきましょう。

　少なくとも１名、可能なら2～3名は、設計からコーディング・試験まで、全ての工程に精通した技術リーダがアジャイル開発では必要でしょう。
　しかし、全メンバが全ての条件を満足することは一般には困難です。　特に、短期間で体制を作る場合には条件を緩める必要があるでしょう。　不足する部分については、チーム内で成長を促し育てることが大事です。　将来必要になるスキルを早めに伝え、必要な調査時間・学習時間は業務に組み込むことが必要になるでしょう。　チームのメンバは相互に成長しあえるように、ノウハウを共有するように誘導しましょう。

■　それでもチームをまとめるために交代してもらうケースはあります。

　　以下にようにコミュニケーションの基礎からの育成が必要になる場合や、アジャイル開発の考え方に適合できない場合には、スキル不一致で交代することもやむを得ません。
　　
・真実を言わない。　事実と予想が区別できない。
・声が小さすぎて聞き取れない。
・指示がないと動かない。　黙って待っている。
・論理的な思考・会話が困難である。
・一度決めたことを変える事を拒絶する。
　　
　また、技術力は抜群であっても、それ以外の面でチームに悪影響を与えるメンバであることもあります。　相互不信に陥る前に交代を求めていきましょう。

・仲間を攻撃する。　共に成長するという視点に欠ける。
・反抗的な姿勢をとる。　ゴールに反対し続ける。

■　プロジェクトが長期にわたる場合、要員の交代にも備えましょう。

　長期のプロジェクトでは技術的キーマンの入れ替えは当然発生します。　突然、キーマンを抜かれないための注意も必要です。　準委任契約は、人を個別に指定して契約することはできません。　受注会社でも人材育成上キーマンを次のポジションに移すことは避けられません。　受注会社としての人材育成に伴うキーマン交代計画は、早めに共有してもらって備えるようにしましょう。　他にも、不慮の事故、親や家族の介護、体調不良や病気など、交代が必要になるシーンはプロジェクトが長期化すれば、避けることは困難です。　備えることを考えなければいけません。

■　属人化はアジャイル開発の弱点の一つです。

■　自動テストの整備をして属人化リスクの低減を図りましょう。

　アジャイル開発では、特定の技術的キーマンが発生することが普通です。　開発現場側のキーマンが一人に集中しないようにPOも配慮しなければいけません。　重要な情報はキーマンの外に見える状態で残されていなければいけませんが、自動リグレッション・テストを整備することが属人化を避ける最大の対策となります。　維持管理や機能拡張を行っていく際にも大切です。　リグレッション・テストの自動化ができると開発プロジェクトは一旦安定状態に入ったと考えることができます。


■　新メンバの参加障壁を低減するための準備を、タイミングは選びつつ行いましょう。

　アジャイル開発でメンバが追加・交代する際に必要なドキュメントの整備を計画しましょう。　詳細設計のドキュメントはソースコードで十分です。　システムの概要、アーキテクチャ図、外部API仕様などが求められますが、あまりにも初期の時期にそれらを整備するのは難しいかもしれません。　システムの基本設計が安定しはじめたら、それらのドキュメントは速やかに整備するのが一つの考え方です。


5.2 自らがゴールを示し、皆に理解してもらってチームを作る

■　もしPO自身のゴールイメージが不明確なら、まだ開発に入ることは止めましょう。

　アジャイル開発ではPO自身の判断が成功の鍵を握ります。　車で言えば運転手です。　最終的なソフトウェアのゴールイメージを持たなければ目的には到達できませんし、開発プロジェクトは迷走するでしょう。　PO自身が開発したいもののゴールイメージを全く持てない場合には、開発メンバにゴールを伝えることもできません。　開発に入るタイミングはもう少し後、ゴールイメージを具体化した後にすべきです。

■　良いソフトウェアを作るために必要なものは、開発者の高いモチベーションです。
　
■　ゴールを共感してもらって、モチベーションを高く維持することに注力しましょう。

　ゴールに共感してもらうことが非常に重要です。　皆が一つの目標を共有できれば良いチームになれますし、小さい成功を繰り返せばよりチームのモチベーションが高まっていくでしょう。　ゴールが理解されなければ、高いモチベーションを維持して欲しいと思っても、それは難しいでしょう。



■　ゴールを正しく理解してもらうために、何度も説明しましょう。

　ゴールは、まだこの世界に存在しないもののことも多いでしょう。　そのゴールイメージを正しく伝え理解してもらうことは大変難しい作業です。　一度で伝わることはないと覚悟し、機会を見て何度も説明しましょう。　プロトタイプ・システムが動き出すまでは、皆のイメージはなかなか合わないものだと思いましょう。

■　ゴールが変化した際には、丁寧にその理由を伝え理解してもらう努力をしましょう。

　ゴールイメージが不安定なときには、途中状態も含めて皆に共有していきましょう。　共有によって、将来の変更への備えが得られる場合があります。　たとえば、この辺りはまだ議論が再燃しそうだから、後で見直す想定で開発を進めていこう、などの判断ができると効率的になります。　ただし、変更の可能性が多すぎると前進できなくなります。　汎用化しすぎることなく作りなおす覚悟を持って仮に決める姿勢が大切です。
　また、競合サービスの影響など外的要因によって突発的に、ゴールが変化することもあります。　その変化に至った理由をできるだけ皆に理解してもらい、モチベーションの低下に繋がらないように配慮していきましょう。



5.3 一人ひとりを知って適材適所に配置する

　アジャイル開発では優秀な技術者を揃えたいところですが、全員が同じスキル・特性とは限りません。　チームとしての力を発揮するために、一人ひとりのスキルや興味をできるだけ生かして適材適所の配置に努めましょう。　4章でも紹介したとおり、コミュニケーションの質を上げるには、メンバの一人ひとりを良く知ることが重要でした。　そこで得た一人ひとりの人物モデルを活用して適材適所を考えることが大切です。　ただし、目の前だけを見てはいけません。　チーム力の可用性（継続性）や育成（スキル向上）を考えた配置とのバランスも大切です。


5.4 状況・問題点・今後の方針を積極的に聞き、現場を正しく理解する

■　良い優先度判断をするためには、正しい情報を集めるように努力しましょう。

　良い判断をするための大前提は、実際の状態を正しく認識していることです。　常に、現場の実態を見て、現場の実態も勘案した優先順位を考え続けていかないと、良いソフトウェアが作れないだけでなく、失敗するリスクが高くなります。　

■　朝ミのヒアリングは、ポイントを絞って短時間で終えましょう。

　朝のスタンディング・ミーティング（朝ミ）では、昨日の実績、今日の予定、現在作業進捗が悪いならその課題が何か、今後の見通し・完了予定時期、を簡潔に確認し、短時間で終了しましょう。　朝ミで課題を報告した開発メンバに対しては、必要なメンバを別途招集し、詳細に相談をする場を設定します。

■　昨日の昼に発生した大きな問題が翌日の朝ミで最初に報告された場合、なぜ速報が遅いのかを確認し、改善していきましょう。

　朝ミは緊急情報を報告する場ではありません。　悪い情報は速報を入れるという習慣がまだ浸透していないと判断した場合には、次回から改善を促しましょう。　



■　開発の作業現場に足を運んで、現在の状況を確認し、困っていることが無いかを確認しましょう。

　POは、ステークホルダとのシステムのゴールの調整やプロジェクトの予算措置、各メンバからの相談に対する判断など、きわめて忙しい存在です。　しかし、時々、開発の現場にも足を運んで、現在の開発メンバの状況を自らの目で確認し、積極的に課題を検出していきましょう。　モチベーション高く皆が開発を行っているでしょうか？　作業環境や生活面で困っていることは無いでしょうか？　生活利便性の解決はモチベーションの向上に効果があります。


5.5 ステークホルダとの調整を実施する

　システム開発は、ステークホルダとの調整と共に進みます。　ステークホルダとは、開発資金を提供する人、システムを構築し運用する人、サービスを売る人、最初に開発システム／サービスを利用する予定のユーザ等、多岐に渡るでしょう。　それらのステークホルダと開発システムの仕様については調整をしなければいけません。

■　ステークホルダとの合意は、チームの代表として現場も見て判断しましょう。

　ステークホルダと開発チームとの間に立って調整をするのはPOの役割です。　しかし、POはステークホルダと開発チームとの相互の主張を確認した後に判断することが基本であることを忘れないでください。　重要な合意の際には、2フェーズ・コミット（図5-2）による合意確認が大切です。　POは最終決定の責任者ですが、現場が反対する決定をした後に開発メンバをどう説得するか、納得させるかにつては事前に考えなければいけません。　開発現場・チームの実態を正しく知って、代表として判断をしなければ、チームのリーダとして認められることはありません。


図5-2　ビジネス上の２フェーズ・コミット



■　アジャイル開発ではリリース・タイミングの自由度が高いことを活用して、開発チームとステークホルダの調整を実施しましょう。

　ウォーターフォール開発・製造請負契約では、リリース回数は通常1回です。　しかし、アジャイル開発・準委任契約ではPOの判断で何度でも可能です。　今開発に入れるか否かという0/1の判断ではなく、常に優先度の高いものからリリースしていくことで、開発チームとステークホルダの双方の都合を調整できることがあります。　品質レベルを含めて双方に信頼される調整をしなければいけません。


5.6 丁寧な対話を続け、バランスの良い優先度判断を続ける

　4章で示したように、コミュニケーションは継続して対話相手の人物モデルを改善することによって質が改善していきます。　それがモチベーションの向上や、チーム力の向上に繋がり、良いソフトウェア開発に繋がっていきます。　しかし、ちょっとした一言によって、モチベーションを大きく損なう可能性も持っています。　十分な関係が出来るまではより丁寧なコミュニケーションを継続するようにしましょう。

■　アジャイル開発では変化は必然です。　期限があるときに、追加分があれば、削る（先送りする）分も同時に作りましょう。

　開発の途中での追加要求による追加変更作業量がAなら、従来予定の作業からA以上の作業量を削減しなければ、開発終了時期が遅延します。　アジャイル開発では削った分（＝優先度を下げた分）をバックログとして、先送りします。　その決断をPOはしなければいけません。　必要ならステークホルダと急いで調整をしましょう。


5.7 人格者のリーダとして信頼される

　チームのメンバから信頼されるリーダになることを目指しましょう。　まずは、仲間になることが第一歩です。　同じ目線を共有できるようになりましょう。　
　小さい成功の積み上げや、開発チームの代表としてのステークホルダとの調整などの実績を通して、リーダとして認めてもらえるように努力を続けましょう。
　開発上の課題や商用サービスでのトラブル対応などについても、隠さず、冷静にかつ先頭に立って、常にバランスが良い判断を続け、開発メンバにとって風通しの良い組織が構築できれば、きっと信頼され人格者としても認められることでしょう。　そこへの到達は容易ではなく、時間がかかるかもしれません。　諦めることなく続けていきましょう。


5.8 仲間とともにWin-Winと成長を目指す

　POはチームメンバとのWin-Winの関係の姿勢を出し、実践することが重要です。　　

■　開発メンバの自己研鑽を推奨しましょう。

　アジャイル開発を支持するソフトウェア技術者は、新しい技術を常に習得するモチベーションを持っているケースが多々あります。　そういった自己研鑽意欲を活かしてあげなければいけません。　いつかプロジェクトにも良い効果をもたらしてくれるでしょう。　プロジェクトの成功と技術者としての成長の両方を目指して行きましょう。

■　開発メンバの超勤削減と健康管理もPOの考えるべき範囲です。

　発注者先の勤務管理責任は発注先の管理者にあります。　しかし、超勤を発注者側だけに任せておくことは危険です。　超勤は、一定レベルであれば生産性を高めるかもしれません。　しかし、アジャイル開発では原則として避けるべきでしょう。

・　準委任契約の場合には、超勤した分が支払額の増加につながります。　休日出勤の対応をお願いしたらいくらかかるか、は知っておかなければいけません。
・　超勤を前提としない進め方をベースに計画をしましょう。　超勤は、いざというときに遅延を回復するバッファとしましょう。　そのバッファを最初から使い尽くしてはいけません。
・　超勤が長期間続くと風邪を引きやすくなるなど、健康面でのリスクが高まるでしょう。　さらに、超勤が続くと、燃え尽きることがあります。　モチベーションが無くなる状態は避けなければいけません。
・　アジャイル開発は、幅広い情報処理の知識を持った高スキルの技術者を期待します。　技術勉強会等に参加するなどして開発物以外のことを自己学習する時間的な余裕を与えましょう。

　POはゴールイメージをもとに、時間・コスト・成果物(機能・品質)のバランスを自分で判断していく必要があります。　ソフトウェア開発はバランスの産物です。　バランスを間違えると良くないソフトウェアになってしまいます。　バランスが悪いもの、それは乗用車にロケットエンジンを積み込んでしまうようなものです。

■　相互に休みやすくするコツを実践しましょう。

　休暇の取得は、全員が持つ権利です。　相互に助け合う体制になると、気持ちに余裕を持って休暇を取得できるようになるでしょう。

・皆が休暇を取得しやすくするために、日々の自分の最終状態を常に他のメンバが共有できる場所に置きましょう。 チケット管理システムなど利用し、帰宅前に記載を意識すべき作業として位置づけるべきです。
・急に休暇を取得する場合には、作業に関する引継ぎ事項の伝達と、休暇からの復帰する時期（明日出社可能か）の見通しも含めて連絡する習慣にしましょう。



6．　品質について考え直す




　本章について、最初に、お詫びがあります。　アジャイル開発における品質確保の手法について、常識らしいものがあるのかについて、著者には全く知識がありません。　本書全体が著者個人の意見を中心に記載していますが、特に本章の内容は将来見直される可能性があります。

6.1 ウォーターフォール開発では形式的な合意形成の事例がある



　ソフトウェアにバグが無いことは証明も確認もできません。　テストはいくらでも継続することも可能です。　さらに、そもそも要求仕様が真の要求を100％満足するものになっていることさえも保証できていないかもしれません。　



　品質100％の世界が無いとすると、どんな試験をどこまで実施し、どこで止めるか、が重要なポイントになります。　QCD(品質・コスト・納期)のバランスをとった判断が必要で大切になります。

■　ウォーターフォール開発の良さは、試験の進め方および試験終了に関する合意形成の形式的な見本が多数あることです。

　ウォーターフォール開発では、たとえば試験の進め方は以下のようになります。

・各工程のドキュメント作成とレビューによる合意を行い品質の高いドキュメントを積み上げる。　必要ならレビュー時間・コメント密度などの指標も活用しドキュメント品質を上げていく。
・試験工程は「V字モデル」で示されるとおり、各工程で生産したドキュメントに対応する試験観点・試験項目を用意する。
・ソースコードはクロスレビューをする。
・単体試験はC0(命令網羅率), C1(分岐網羅率), C2（条件網羅率）などの網羅率の目標値を決める。
・試験観点については網羅性をレビュー合意する。
・目標の試験密度を決め、試験項目で正常系試験数と準正常・異常系試験数の比率を決め、試験観点から試験項目を展開する。
・長安（長期安定化試験）、過負荷長安について試験時間の目標を決める。

　そして、試験を実施した結果について、たとえば以下のような分析と対策を実施して、試験終了判定を実施します。

・各目標値を満足しているか、基準範囲内に含まれているか、乖離があれば乖離理由は何かを分析します。
・バグ検出数・傾向の分析をします。　高密度なら品質低ではないか、低密度なら試験不足ではないか、バグ出現は特定の機能や観点部分に偏りないか、摘出した工程は適切だったか、などの分析を行います。
・長安実施中のリソース傾向、過負荷時の状態、過負荷終了後に定常状態に戻った後のサービス回復／リソース回復状況などを分析します。
・バグや異常動作については、原因分析（なぜなぜ分析）を行って弱点やミス発生理由を検出します。　偏り（特定の機能か、特定の使われ方か、特定の作成者かなど）のある弱点がないか分析します。　そのバグが作り込まれた本当の理由はなにか、そのバグはどの工程で検出すべきだったのか、それを防ぐために本来各工程で何をすべきだったかなど、を分析します。
・各弱点や原因に応じて本質的な品質向上対策を類似部分についても水平展開を実施します。　
・品質不足、試験密度不足、観点漏れがあれば、追加で強化試験を実施します。
・強化試験結果の再分析とバグ原因への対策完了で試験終了を判定します。
・バグ収束曲線の傾向分析を行い収束傾向から試験終了を判定します。

　ウォーターフォール開発では、試験前に合意した各種目標値を満たすことで試験終了と判断することができます。　その基準を満足することが、決して、サービス開始後に重要な問題を起こさないということを保証するものではないことも多くの人は理解しています。　実際、ウォーターフォール開発で実施したシステムでも不具合・故障は発生しています。　それでも、ほぼ形式的に試験終了判断を可能にする合意形成メカニズムは有効です。　他者と同等レベルの形式に従って試験を実施したので、問題が発生しても、それは仕方なかったという横並び論理が使える枠組みとして割り切るのでしょう。　（実際に、商用サービスで大きな問題が発生してしまうと、そんな理由は何の気休めにもならないのが実態かと思いますが・・・。）
　


■　ウォーターフォール開発では、受注側に完成責任（瑕疵担保責任）があるので発注側に安心感はありますが、実は期待するほど強力な仕組みではありません。

　ウォーターフォール開発では、受注する側に欠陥の無いものを納品する義務が発生しています。　その枠組みがあるから、困ったら無償で直してもらえばよいと考えれば良いのでしょうか。　ある意味では正しい考え方ですが、一方で注意しなければいけない点はあります。

・受注側の責任による欠陥であることを客観的に示せるでしょうか。　仕様として誤解なく明記されているでしょうか。　伝え方が悪かったなどグレーゾーンであることがあります。　伝えた記録はきちんと残っているでしょうか。
・要件FIX、仕様FIX後に仕様変更を押し込むなどの強引な行為は無かったでしょうか。　途中から言い方を変えて受注者を混乱させていなかったでしょうか。　変更に伴って期間・費用を適切に見直した契約変更を実施しているでしょうか。
・経験豊富な開発会社であれば、都度、発注者にレビューを依頼し確認を積み上げてきます。　発注者側でレビューは完全にできているでしょうか。　最終品質も、「ここまでこういう試験をしている」と発注者に報告した記録と、発注者側の受入試験に合格した証跡があるはずです。　受入確認は十分だったのでしょうか。

　これらに発注者側が完璧に対応していれば、瑕疵担保責任によって無償改修してもらえるでしょう。　しかし、発注者側にも仕様記載漏れ、レビュー確認漏れ等が発生すると、訴訟に発展していきます。　痛み分けとなった場合には、双方に弁護士費用と不毛な時間が発生します。　「伝家の宝刀」だと思って抜いたら自らをも大きく傷つける「両刃の剣」かもしれません。

■　アジャイル開発における品質確保・試験終了への考え方は、ウォーターフォール開発に比べて形式化されていません。

　アジャイル開発ではウォーターフォール開発と同じ試験終了ストーリーは使えません。　そして、試験終了の基準もなく、すべてがPOに任されているというのが現状でしょう。　では、アジャイル開発における試験の進め方、試験の終了判断はどうすれば良いでしょうか？


6.2 アジャイル開発での品質確保・試験終了の考え方

　3章を読んだ方は、すでに理解されていると思いますが、アジャイル開発では以下の原則があります。

■　アジャイル開発では品質確保責任も、発注者側(PO)にあります。

　品質確保も完成責任の一部です。　よって、品質についてもPOのコントロール配下にあります。　
　ウォーターフォール開発では形式として、「目標試験密度をクリアすること」、「バグ収束曲線が収束すること」、「バグ発生原因を分析し、対策が完了済みであること」、などと形式的に品質条件を指定することが可能でした。　アジャイル開発であってもPOがウォーターフォール開発と同様の基準を達成する進め方は可能です。　それも一つの方法でしょう。
　しかし、ウォーターフォール開発と同じ進め方は本当に正しいのでしょうか。　アジャイル開発のPOは早期のサービスリリース圧力と、品質確保のバランスの中で、もっと良い方法と試験の終了時期を考えていくべきでしょう。　

■　アジャイル開発では、一定レベルの品質の確保の後は、小さく利用してもらいながら品質を上げ、利用対象を拡大するアプローチをとります。

　アジャイル開発では、初期にまず小さい範囲のユーザに利用を開始してもらい、徐々に利用者の範囲を広げていくという考え方を素直に適用します。　ウォーターフォール開発とは異なり、試験を一旦終了しリリースした後であっても、追加で品質向上のための試験を実施することができますし、初期のユーザ試用によって発見された重大な弱点は早期に対応していくことが可能なのです。　アジャイル開発では以下の２つの考え方が大切になってきます。

【方針1】　重要な部分から品質を確保する考え方
【方針2】　継続的に品質を改善していくという考え方

それぞれについて更に考えていきましょう。


6.3 【方針1】　重要な部分から、品質を確保する

■　テストの前に、まずは動作させることを優先しましょう。　テストは、動作するものが固まってから実施するものです。　早すぎるテストは悪です。

　テストは動作するものが固まってから実施するものです。　アジャイル開発では設計や仕様をダイナミックに変更させていくケースがあります。　そういったアーキテクチャの試行錯誤の工程でテストを優先してはいけません。　アーキテクチャを固めることは、テストをすることよりも明らかに優先されます。　「コードを書いたら、まずはテストする」という考え方や、「UT 100％」という考え方の優先度を高く設定してはいけません。　コードを書いた瞬間こそ、テストコードを書きやすいというケースもあるでしょう。　その場合はソースコード中に「TODO」として、テストに関するメモを残すことに留めましょう。

■　テストは、早めに大きなリスクを抽出するように順序を計画しましょう。　　

　テストは大きなリスクを早めにつぶすべき、それが考え方の軸となります。

・システム設計上の核となる部分。設計が難しい部分。
・システムのメインルート。ユーザ影響が大きい部分。
・課金等に関わるもののうち根幹となる部分。
・仕様が難しい部分。
・バグが発見されると改修するのに時間がかかり、代替手段（運用対処など）がない部分



■　１つのテストの中に、重要な部分と重要ではない部分が混在する場合には、テストも分割して各優先度に応じたタイミングで実施しましょう。

　大切な機能だから最初にテストすべきと選ばれた機能であっても、本当にその機能を全てテストするのか、を考え、重要な部分とそうでない部分が混在しているのであれば、重要でない部分の実施優先度を考え直しましょう。　「ついでにやりたいから」という理由に対する優先度は低いと思いましょう。　一緒にやることで時間効率が高いのであればバランスを考えて判断しましょう。

■　機能ごとに、試験工程の実施時期を変えることは普通です。

　重要部分やシステムとして早期に動かすべき部分の結合試験と、周辺部分の結合試験のタイミングは当然異なって構いません。　機能の重要性が高いものの結合試験工程と、機能の重要性が低いものの製造工程が各々同時に進んでいることは平常状態です。

■　外部APIのテストは重要です。　

　システム連携など、外部システムとのAPIを持つシステムであれば、そのAPIに関するテストは重要です。　他システムに悪影響を与えないために、さらに、今後のリリースにおいてもAPIを確実な互換性を維持するために、早期にテストセットを整備し、確実に試験すべきです。





■　画面系のテストは、ずっと後です。　利用者の意見を聞きながら変化・反映させる部分に対して、最初にテストしても無駄になります。　

　外部との連携部分として、ユーザ画面もあるでしょう。　しかし、画面系について最初から試験密度を上げるテストを行ってはいけません。　できるだけ、UI部分とバックエンドをREST（HTTP）等で分離し、優先度を変えて試験を実施していきましょう。

■　真にエンドの利用者に使ってもらうフェーズのリリースになってきたら、ユーザに失望されないレベルの品質が大切です。

　真のエンドユーザに失望されて、今後の開発や利用で協力を得られないレベルに陥るのでは問題があります。　エンドユーザはアジャイル開発にも、不完全なシステムの利用にも慣れていないかもしれません。　あらかじめ目的と品質レベルを通知し納得してもらって使ってもらいましょう。

■　エンドの利用者に使ってもらった後のリリースでは、デグレード（先祖がえり）を避けましょう。　

　一旦、利用してもらった後に、改善版を再度リリースして使ってもらう際には、デグレードしないように注意し試験を実施しましょう。　リグレッション・テストの整備を実施し始めるタイミングになっています。　あわせて構成管理（各サブシステムのバージョン管理等）も確実に実施していきましょう。





■　その後のリリースでは、テスト不足を取り繕うことで忙殺されることのない品質レベルを目指しましょう。

　品質が悪いものを大規模ユーザに対してリリースすると、多数の課題が出てくるかもしれません。　品質強化の作業で開発メンバを酷使してはいけません。　アジャイル開発では開発メンバのモチベーションの維持が重要なポイントでした。　大規模ユーザへのリリースの前には、十分な総合試験と自動リグレッション・テストの整備を行いましょう。　リリース後の品質対応の苦労を知る優秀な開発メンバを含む開発チームは、きっと品質を上げてからリリースした方が楽だと思っているハズです。


6.4 【方針2】　継続的に品質を改善する (自動リグレッション・テストの整備)

　アジャイル開発で作られるシステムは常に成長し続けるシステムです。　永遠のβ版かもしれません。　
　そこで、重要になるのが自動リグレッション・テスト（回帰試験）の整備と実施です。

■　リグレッション・テストの整備とその自動化率の向上は計画に入れておきましょう。

　アジャイル開発のテストにおいてリグレッション・テストは必須です。　それは、アジャイル開発の属人化リスクを避けるための重要な手段でした。　リグレッション・テストの整備はついでの作業でできるレベルではありません。　あらかじめ計画の中に組み込んで置く必要があります。　リグレッション・テストの自動化環境の整備やCI環境の整備は、システム本体開発の遅延対策用のバッファ（たとえばCIは後にする、自動化は後にするなど）として活用することもできます。
　なお、自動リグレッション・テストの整備についても100％主義を持ち込んではいけません。　たとえば、異常状態からの復旧のテストを100％自動化するのは投資対効果の面から良い判断とは言えないケースもあります。　また、リグレッション・テストの整備は、システム本体開発よりは優先度が下がることは意識しましょう。　リグレッションコードの整備を優先しすぎてシステムの進化を止めすぎると、アジャイル開発で得るはずだった競争力が低下して、開発プロジェクト自体の停止に至ることもありえます。





■　リグレッション・テストの拡充によって、過去のリリースより品質が向上していることを積み上げて保証していきましょう。

　リグレッション・テストの整備も段階的に実施していくことになります。　自動化の度合いも徐々に向上させていくことになるでしょう。
　リリースの都度リグレッション・テストを完了させていることによって、過去のリリース以上の品質であることを保証していきます。　開発者もサービス提供者も安心して次の機能開発に進んでいくことができるようになります。　

■　リグレッション・テストの整備のメリット／デメリット

　メリットは以下となります。

・属人性の削減ができる。　維持管理費用の低減になる。
・OSSのセキュリティパッチ対応やバージョンアップの際にも、自信を持って対応できる。

　一方、デメリッは以下になるでしょう。

・機能作成時に、テストコード作成の手間が増える。
・将来の機能変更の際に、テストコードのメンテの手間が増える。

■　テストコードは適切なフレームワークを利用し、シンプルにして維持管理しやすくしましょう。

　上記のデメリットに対応するためには、テストコード自体の維持管理を考えなければいけません。　適切なフレームワークを活用し、できるだけシンプルに作らなければいけません。　テストコードが複雑すぎて修正もできない、テスト自体が正しいか判断できない、ということになっては本末転倒です。

■　CI環境の整備のタイミングは遅くても良いと思います。

　自動リグレッション・テストが完成後、一度動作したシステムに対して継続的インテグレーション(CI)環境の実現と実施は非常に有効です。　Build&Testを毎晩自動実行していれば、互換性の崩れを翌日に検出できます。　けれどもリグレッション・テストの実行が自動化されていることがより重要であって、その日々実行の環境はそこまで優先度が高くありません。　実施するタイミングは、一度、商用サービスリリースしてからでも良いと筆者は考えます。　当初の開発計画にはCI環境の構築までを含めておき、品質問題が発生した際には強化試験に置き換えるバッファとして使うのがバランスの良い考え方だと思います。

■　TDDの価値は無いと思います。　多くのTDDは、実は単体試験駆動開発(UTDD)だからです。

　「テスト駆動開発(TDD)」、それは、非常に魅力的な視点を提供しています。　筆者もウォーターフォール開発の際に、設計書はテスト項目で書こうと提案したこともありました。
　しかし、現在の筆者の考えでは、アジャイル開発においてTDDは良くない考え方の側にいます。　TDDと言った場合には、単体試験を前提に語られているように思います。　要求仕様や基本設計等に対応するレベルのTDDであれば優先度を上げていくことは理解できますが、単体試験レベルを志向するTDDは良くないアプローチです。




■　TDDは全体のアーキテクチャの決定より個別プログラムコードの品質を優先している点において、早期サービスリリースを優先するスタイルとは合いません。

　　筆者の考えでは、単体試験の優先度はアーキテクチャの決定より圧倒的に低いと考えています。　まずは全体のアーキテクチャ設計をユーザからのフィードバックを受けながら確かめ修正していくことが優先されます。　将来捨てるかもしれないプログラムコードに対して、品質を求めていくことは優先順位が間違っています。　アジャイル開発ではUT100%よりも、サブシステム間のインタフェースを試しながら確定する方が重要なのです。

■　全体アーキテクチャが固定化された後の機能追加開発であれば、システムテスト駆動開発（STDD）は有効です。

　単体試験レベルに対するTDDではなく、結合試験レベルに対するTDDが有効になることは間違いありません。　その場合のTDDは外部インタフェース（API）の試験と、ユースケースシナリオ試験になります。　ATDD（受入試験のTDD）もこれに近いかもしれません。　


6.5 それでも、納期が厳しく品質も求められる場合の対応 （例）

　それでも、納期が厳しく品質が求められる開発の場合もあるでしょう。　その場合にはどのように進めるべきでしょうか？
　残念ながら科学的な手法はありません。　ウォーターフォール開発スタイルでの開発だった場合とアジャイル開発での比較をしながら考えていくのも一つの方法だと思います。
　従来のウォーターフォール開発で開発する場合のV字モデルを参照しつつ、KKD法によって、たとえば、一旦以下のような基準（仮）とします。

　　　　　0／5の時期	・・・　仕様の提示、設計開始
　　　　　1／5の時期　	・・・　仕様のFIX
　　　　　1／2の時期　	・・・　製造の完了、試験工程開始
　　　　　納期1ヶ月前	・・・　最低限の納品物が存在する
　　　　　4／5の時期　	・・・　商用環境試験開始
　　　　　5／5の時期　	・・・　納品

　これを参考として、あなたのプロジェクトの計画や実績との比較分析をしてはどうでしょうか。　たとえば、1/2の時期で製造工程は完了しているでしょうか。　普通のアジャイル開発であれば、既に先行開発部分を利用者に使い始めてもらっていてもおかしくない時期でしょう。　しかし、あなたのプロジェクトではまだ製造工程が完了していないとしたら、それは納期に対して大きな遅延かもしれません。　開発機能の一部を落としてでも試験に入っていかなければ品質確保は難しいのかもしれません。　逆に先行する部分に対する試験が十分進んでいれば、±0であって遅延はないのかもしれません。　この分析によって、今後、アジャイル開発で受け付けられる仕様変更の量を見極めるのも一つの方法でしょう。
　この例は、あくまでも、他に頼るべき基準が無くて困っている場合ですが・・・。　






7．　開発担当者の心得






7.1 真のゴール、POの価値観、チームの状況を理解し、POの判断に近づく努力をする
	
■　POを全力で支援する姿勢を持ちましょう。




　アジャイル開発では、ステークホルダとの仕様調整や各種の判断がPOの責任となり負担が集中します。　時には、POの判断やレビュー待ちなどでプロジェクトのスピードが減速することもあるでしょう。　そんなアジャイル開発をより効率的に実施するには、開発メンバは何をすればよいでしょうか？

■　POの判断に近い判断ができるようになって、主体性を高めましょう。

　それには各開発メンバが、POに近い判断ができるようになるのが理想です。　POの考える真のゴールを正しく理解し、POと同じ価値観をもって、今のチームの状況を見ながら判断していく練習を積み重ねましょう。　そうやってPOと同じ判断で作業が進められるようになれば、POからの修正の指示は減少し、最終的にはあなた自身が自立して動けるようになるでしょう。　

■　POの人物モデルを持って、自らを成長させていく。

　では、POの判断に合わせるには、具体的には何をすれば良いでしょうか？　4章で示したように、まずは、相手の人物モデルを自分の中に持つことがコツの１つです。　そして、各種の状況におけるPOの判断を見て、その人物モデルの価値観での判断と比較してみましょう。　異なっていれば、その人物モデルを補正し成長させます。　その判断の差が発生した理由が理解できないときは、POに確認しましょう。　「こういう判断もあったと思うのですが、なぜその判断では無かったのですか？」と。

■　POに求められている役割・責任や心得も理解しましょう。

　3章、5章で示したPOの役割・責任や心得等を理解して、POの判断に近づきましょう。



■　優先度の変化や要望の変化の際も、その背景を含めて理解しましょう。

　アジャイル開発では、変更がよく発生します。　でも、その変更には理由があるはずです。　変更の際には、その背景を知るように努め、POの判断を深く理解していきましょう。

■　他のメンバの作業状況も知り、チームの状況を把握しましょう。

　POとできるだけ同じ視界を持つことが重要です。　あなただけではなく、チーム全体の状況も積極的に把握していきましょう。　ただし、それに時間をかけ過ぎることは望まれていないと思われます。　毎朝のスタンディング・ミーティングの場などで、自分の報告・相談をするだけではなく、他のメンバの報告・相談も興味を持って聞いておきましょう。

■　POの人物モデルが成長すれば、POの判断に近づけます。

　ステークホルダとの調整など、完全にPOと同じ視点で判断することは困難ですが、POの人物モデルを通して理解が進むと、開発者がPOの判断をかなり正しく予測して作業を進めることが可能になると思われます。　


7.2 自らの状況を適切に伝えるコミュニケーション姿勢を持つ

　POは、正しい情報を持っていなければ、正しい判断はできません。　あなたの情報を適切にPOもしくは関係者に伝える姿勢を持ち続けなければいけません。　では、適切に、というのはどういうことでしょうか？

・適切な相手：　報告・相談は、適切な相手を選びましょう。　作業のスコープや優先度の相談であればPOですが、ある製品の使い方であれば、製品ベンダに聞くべきかもしれません。　技術的な問題であれば、メンバの中に対応できる人がいないかを朝のミーティングで全体に向かって呼びかけるべきです。

・適切なタイミング・頻度：　伝えたい内容と相手の状況とのバランスを理解して、タイミングをはかって報告・相談をしましょう。　相手は何か急いでいる状態か否か、報告すべき内容は緊急性を伴うか否か。　判断できないときは、短く相手に都合を聞くべきでしょう。　「この後、ＸＸＸの締め切りについて相談したいのですが、お時間大丈夫でしょうか？」　さらに、作業が長くかかる場合には、順調なのか／問題があるのか等、その作業への期待にあわせて報告の頻度を上げていきましょう。　ずっと、報告せず一人頑張った挙句、「できませんでした」という報告をするのではなく、途中で「苦戦中です」と、状況を入れるべきです。


・適切な粒度：　朝のミーティングなどでは、できるだけ簡潔に結論を言うべきです。　さらに相談が必要であれば、あらためて場を持って、より詳細に伝えるべきです。　相手から質問を受けた場合にも、相手の求める会話の粒度を意識すべきです。　「Ｙｅｓ」、「Ｎｏ」だけ聞きたいのか？　判断根拠等を聞きたいのか？　不明なら、大きな粒度から徐々に詳細に語っていきましょう。　朝のミーティングでの報告が、昨日と内容が同じという報告は良くないケースです。　同じ課題を取り組んでいたとしても、粒度を細かくして、具体的な差分を伝えなければ、進捗状況は伝わりません。

■　コミュニケーションが嫌な場合にはPOに相談しましょう。

　アジャイル開発では密度の高いコミュニケーションが必須で、かつ、徐々にコミュニケーション・スキルも向上することが期待されます。　しかし、もし、あなたがそれに耐えられないのであれば、POに相談しましょう。　プロジェクト離脱のタイミングをPOに判断してもらうことも一つの道です。

■　あなた自身の人物モデルをPOとチームメンバに持ってもらいましょう。

　POにも自らの人物モデルを正しく持ってもらわなければ、質の高いコミュニケーションには至りません。　POとチームメンバが4章で示したあなたの人物モデルを正しく作れるように情報を提供すべきでしょう。




■　POは現場の状況に興味を持っています。

　POは作業進捗に対して、期待の期間とのズレがあった場合に、「時間がかかった理由は何？」とよく尋ねるでしょう。　それは、POが現場の状況を正しく理解するための質問です。　「何か想定外の問題が発生しているのではないですか？」と、同じ意図かもしれません。　作業が上手く進まない要因は、素早くPOに報告して、このままのアプローチで良いのかを確認していくべきです。　POからの質問に対して、「一人悩んで、ずっと調べてました」という回答が出るケースは、アジャイル開発の進め方としては望ましくない状態です。　


7.3 次にやるべき作業案をもって優先度を都度POと相談する

■　POの負担を下げることに貢献しましょう。

■　技術者として、主体的であることを目指しましょう。

■　コミュニケーションは、あなたの中のPOの人物モデルを確認し補正するタイミングだと思いましょう。

　アジャイル開発では、作業の優先度に迷いがある場合には、POに相談するものです。　PO自身の負担を下げて、あなたの中にあるPOの人物モデルを試し改善する姿勢を示すのであれば、あなたの考える選択肢と優先順位を同時に提示すべきです。　あなたは常に受身ではなく、技術者として主体的であるべきなのです。　たとえば「案はA, B, Cの３つあります。　XXXの理由で案Aが良いと思いますが、いかがですか？」と聞いてみてはどうでしょう。　決めるのはPOであっても、提案するのはあなたで良いのです。

■　次に、実施するべき作業が不明で、作業待ち状態に入ったのであれば、急ぎPOに作業割り当てを依頼しましょう。

　アジャイル開発では、準委任契約という枠組みを使います。　シンプルに言えば、結果に対して費用が支払われるのが製造請負契約、稼動時間に応じて費用が支払われるのが準委任契約です。　つまり、POはあなたが仕事を持っていない状態を避けたいのです。　全ての作業が完了し、作業割り当てが無くなったときや、他者の作業待ちに入って当面の作業が無くなった場合には、急ぎPOに次の作業割り当てを依頼しましょう。　普通は、チケットシステム上にバックログとして積んである次の優先度の作業になるはずです。　それで良いかを確認して進めましょう。

■　仕様を実現する際に、もし仕様を若干変えるだけで、劇的に実装期間が短くなる方法があれば、それもPOに伝えましょう。

　仕様は原則として守るべきものですが、アジャイル開発ではその実装にかかる費用とのバランスを重視します。　もし、若干仕様を変えるだけで、3ヶ月かかる実装が１週間で済むのであれば、POには魅力的な提案に感じるかもしれません。


7.4 技術者として高い付加価値を提供する

■　要求スキルの多様化に対応し、自分の付加価値を上げていきましょう。

　「設計はできません」、「Javaでのコーディングしかできません」、「試験工程しかできません」などのように限定的な技術スキルのメンバは、直ぐにアジャイル開発に対応することは難しいかもしれません。　アジャイル開発では、基本設計は無理としても、その他の工程は誰もができなければ効率が低下します。　まずは、プロとして、情報処理技術について広く深く理解していきましょう。
　その昔、大量生産が重要だった時代に、工程毎に要員が割り当てられる流れ作業（ライン生産方式）が生まれました。　その要員は常に同一工程を担当するため、後に、「単能工」と呼ばれることになります。　市場が成長し、ニーズが多様化してきた頃、多品種少量生産のモデルとして、一人または少人数のチームで全工程を担当するセル生産方式が生まれました。　彼らは全工程を担当できるため「多能工」と呼ばれるようになります。（巻末の補足6）
　さて、ソフトウェア製造産業は、大量生産でしょうか？　それとも多品種少量生産でしょうか？　当然、後者です。　ソフトウェアの大量生産はコピーで済んでしまいます。　皆さんは、多能工として、マルチな能力を発揮していかなければいけません。　もう、単一工程の専用歯車ではないのです。





■　アジャイル開発について他書籍を参考にしましょう。

　本書はアジャイル開発を日本で実施するのに大切な部分を特に抜粋強調して書いています。　しかし、アジャイル開発の本場である米国のノウハウを紹介した書籍も多数あります。　それらにも興味を持って目を通してください。　POの右腕として信頼される技術者を目指してください。

■　常に、新たな情報処理技術を身につけ、プロジェクトの中長期的な方向についてもアドバイスして貢献しましょう。

　首都圏であれば、各種の勉強会、LTの場などが企業枠を超えて開催されています。　積極的に参加することを推奨しましょう。
　近年では、低コストなPOD（Print on Demand）サービスも普及してきました。　業務に関連しない技術情報について、外部に発信することで理解を深めていくことも良いでしょう。
　ただし、業務に関わる情報を外部に漏らすことは、禁止事項になります。

7.5 相互にフィードバックし、双方が成長する

■　チームメンバもPOが良いリーダになるように誘導しよう。

　POが当初からアジャイル開発の成功経験が豊富な人格者であるとは限りません。　もしかしたら、これまでウォーターフォール開発しか実施しておらず、初めてのアジャイル開発である可能性もあります。　そうでなくても、人間は神様ではありません。　完璧ではないのです。　PO自身がアジャイル開発のPOとして上手く振舞えるように、適切に開発メンバもフィードバックしてあげましょう。　特に、コミュニケーションの質が悪い、優先度の判断・変更理由が全く理解できない、など、チームメンバ全体のモチベーションに関わる場合には、きちんと話し合って双方の改善点を明確にして対応していく進め方が必要でしょう。　真に良いPOであれば、常にWin-Winの姿勢を持っているはずです。　適切に改善してくれるでしょう。



7.6 アジャイルの罠に注意する

　アジャイル開発だからこそ、迷い込む間違いがあります。　注意しなければいけません。

■　動くもの見せると細かな指摘が多く出ます。しかし、細かな仕上げは最後に回し、最も重要な部分の作業を進めましょう。

　アジャイル開発では動くものが早めに確認できます。　すると、具体的で細かなコメントが多数、出やすくなります。　しかし、それらにすぐに対処するのは止め、コメント対応の優先を見極めましょう。　細かなコメント対応を気にしすぎているとプロジェクトの前進のペースが一気に遅くなります。　いつでもできる細かなコメントへの対応は最後でいいのです。　もっとも重要な部分を先に実施していくのがアジャイル開発です。　システムの鍵となる重要部分をできるだけ早く一回通して動くものを作り上げ、プロジェクト全体の目処を早くつけることの方が大切なのです。　そして、重要な部分・時間のかかりそうな残り部分を検出して、そこに手を打っていくことがアジャイル開発なのです。

■　アジャイル開発の初期には、アーキテクチャを固めることが重要であって、プログラムコードの品質を目的にしないケースもあります。その場合、そのお試しコードは後に捨てることもあります。

　プログラムコードに価値を置きすぎると、そのお試しコードを利活用することが主眼となって、見通しの悪い設計になる場合があります。　最初に一通り動かす際に使ったプログラムコードは、後々、捨てて、良いプログラムコードに置き換えることも普通に行われなればいけません。　もちろん、100％のリファクタリングは費用対効果が良くありませんから、維持管理のし易さを考えながらバランスの良い判断をしなければいけません。　新しいチームメンバが入った際のプロジェクト理解用の作業としての活用法もあるでしょう。

■　POにリーダシップがあるため、開発メンバに主体性が芽生えない場合には、指示待ち人間に留まってしまうケースもあります。

　請負開発では受注側の提案したことの責任が強く問われましたが、アジャイル開発ではプロフェッショナルとしての善管注意義務は発生するものの、最終責任者はPOです。　技術力を活かした主体性を発揮してPOに貢献することが期待されています。
　しかし、常にPOの指示に従い続ければ無難に進むという側面もあるため、モチベーションが高まらない場合には、そのまま指示待ち人間としてスキルが固定化されるリスクがあります。　そういう開発メンバはアジャイル開発には向いていないと思います。

7.7 ウォーターフォールの悪癖は矯正する

■　過剰品質は悪です。　【オーバーフィット問題】

　アジャイル開発ではかかった時間に対する効果を重視します。　自分が満足したいからといって、優先度の低いところの対応に時間をかけてはいけません。　POは、そんな時間があるんだったら、もっと別のところをやって欲しいと思うはずです。　自分の足元だけを見て満足してはいけません。　時間がかかる場合には達成レベルと優先度をPOに確認することが必要です。

■　悪い情報の速報を入れないのは駄目です。

　「悪い情報だが、もう少し問題が明確になるまで報告するのは止めておこう」という判断や、「問題だが、報告すると直ぐに対策を出せ、と言われるから、対策が決まるまでは問題の報告は遅らせよう」という判断は駄目です。　POには悪い情報をできるだけ早く報告し、それを含んだ視野の中で良い判断をしてもらいましょう。

■　自らの失敗や遅延を、ごまかしたり曖昧にして報告してはいけません。

　正直で、透明性の高い組織文化を作ることにあなたも協力していかなければいけません。　失敗や遅延の大きさに応じて、チームメンバの作業の優先度を変化させるのもアジャイル開発です。　ごまかすことで発生した不信感は、その後のコミュニケーションの質を悪化させます。

■　ドキュメント化を最初にするのは時間の無駄です。Face to Face（F2F）で議論し、ドキュメントは結論を記録・共有するものと考えましょう。

　方式を議論する際に、検討資料を作って案を3つ並べて、各種の観点で評価して選定していく、そういうスタイルをPOが望んでいるでしょうか？　望んでいれば問題ありませんが、「その方式は議論するまでもなく、こうではないですか？」、「いや、ここはこうではないでしょうか？」という議論をホワイトボードの前で、サクサク決められる部分も多くあるのではないでしょうか。　重要な選択については、決定した方式と決定のポイントをドキュメント化することが期待されますが、コミュニケーションのための大量のドキュメント作成は止めましょう。　ウォーターフォール開発では受注側にとって判断経緯の記録は責任問題に備えるために重要でした。　しかし、アジャイル開発では発注側のPOが責任を持ちますし、判断や実装は１回ではなく、訂正可能なのです。

■　ソースコードのレビュー単位は小さくしましょう。

　ソースコードのレビューに出す際は、ソースコードをレビューする人の負担も勘案し読みやすさを考え、小さい単位にしましょう。　自己満足を優先した巨大なソースコードをレビューに出すと、相手の応答は遅くなり、方式のズレがあった場合等に大きな無駄作業となります。　やむを得ず巨大なソースコードをレビューに出す場合には、F2Fで適切に解説を行い、レビュー速度を改善しましょう。　アジャイル開発ではソースコードもコミュニケーションの一部として大切なものになります。


■　作法主義・前例主義を優先してはいけません。

　　作法も、前例も、アジャイル開発にとっては判断のための一つの情報にしか過ぎません。　ウォーターフォールで慣れた作法・実績のある作法であっても、その場で本当に重要なのかを改めて考え直してください。　臨機応変が大切です。

■　絶対的な工程の区切りはありません。バランスです。

　ウォーターフォール開発では、原則として前の工程に戻りません。そのための工程完了の判定の実施などをする開発もあるでしょう。　しかし、アジャイル開発では、その区切りは曖昧です。　大枠での工程、自分の作業が何工程なのか、などは意識するために工程名は使いますが、決して工程で区切るのではなく、工程名はコミュニケーションの用語だと思いましょう。

■　作業の順番は重要です。「上から並んでいる順にやってます」は考えていないことかもしれません。

　請負開発では、結局100%やりきることが求められました。　その時は、どの順番に実施するかよりもやりきる事が重要でした。　しかし、アジャイル開発は作業の順番が重要です。　たとえば、試験をするにしても、上から順番でいいのか？バグを見つけたら最も修正に時間がかかるところはどこか？もっともサービスで重要なところはどこか？連続で実施した方が効率的なものはないか？他のメンバの効率をあげるにはどれを実施すればよいか？途中で試験を打ち切った場合に大切な部分は試験できているか？などを考えて順番を調整することが大切です。　

■　作ったソースコードは捨てることもあります。先行しすぎた単体試験は無駄になります。

　　「手戻りが発生します」、「既存のソースコードが無駄になります」は、ウォーターフォール開発では工数が増加するため大きな問題でしたが、アジャイル開発では優先するもの次第で、捨てる事が発生します。　たとえば、スパイラル開発で、暫定的に作っておいた部分や、設計が悪かった部分などです。　それらの部分に対してUT 100％を最初から目指すことは無駄になります。




















8．　受注側　開発責任者の心得




8.1 アジャイル開発を受注するときに確認する

■　本質的には受注側にプロジェクト・マネージャ(PM)は不必要な存在になります。

　成熟したアジャイル開発において受注側の開発責任者、ウォーターフォール開発で言えばプロジェクト・マネージャ（PM）の出番は、本質的にはありません。　ただし、日本におけるいくつかの事情と不都合に対応するために存在しなければいけないケースがあります。　

■　最大の役割は、請負開発契約になりそうになった場合の阻止です。

　日本の主流のソフトウェア開発のスタイルはウォーターフォール開発です。　多くの顧客も従来ウォーターフォール開発スタイルで実施してきています。　その流れと無思考主義者・前提主義者等の抵抗で、アジャイル開発スタイルであっても請負開発契約を求めてくることがあります。　アジャイル開発を請負開発契約で受注してはいけません。　目先の売り上げに目がくらんで、不良プロジェクトを発生させてはいけません。

図8-1　開発スタイル判定フロー


■　アジャイル開発を実施するのであれば、準委任契約に修正してもらうのはあなたの役割です。

　1章で述べたように、アジャイル開発を請負開発契約で実施しようとすると合理的に考えて失敗します。　それを準委任契約に変更してもらうことこそ、あなたの役割です。　たとえば、その際にこの書籍の1章・2章が顧客との交渉の一つの参考になることを願っています。　なお、日本では準委任契約の中に「瑕疵条項」を加えることも可能なので油断は禁物です。　その場合、契約書の件名が準委任契約だからといっても結局、製造請負契約と同等の問題が発生します。　契約書の各条項を精査し、リスクが無いことを確認することはあなたの役割です。

■　もし製造請負契約で受けてしまったら、あなたの役割はウォーターフォール開発スタイルを貫いて開発を進めることです。

　万が一、製造請負開発契約で受けることになった場合には、仕様と見積りに対して納品する姿勢を貫きましょう。　POの仕様変更・追加の要望に対して、「それは仕様に含まれていません」、「それは見積りの条件とは異なるのでできまません」、「仕様は既にFIXしましたので、新たな要望は契約変更をご検討ください」、を連発することがあなたの役割となってしまいます。

■　受注側からアジャイル開発にしましょう、と誘導するのは無責任です。

　アジャイル開発は、ソフトウェア完成責任が発注側にあります。　そして、1章で学んだように発注側の幹部の意思・価値観、制度の整備、責任を持てるPOの存在などの準備が必要です。　気軽に言い放つものではありません。　発注側にはメリットも多いが責任も大きくなることをきちんと伝えて、順序良く発注側の意思を固め、制度を確認してもらうことがWin-Winになる近道です。


■　非常に信頼できるPOが、請負開発でもなんとかする、と言って来たら・・・

　もし、非常に信頼でき、これまでも良好な関係を保ってきた納品物検収の権限も持つPOがアジャイル開発を（発注者側の経営幹部価値観や組織制約の都合で）請負開発契約でやりたいと言って来たらどうするべきでしょうか？　仕様を上手く書くことによって柔軟な変更に対応する開発物を許容することも不可能ではありません。　受注側としても非常に難しい判断を求められるでしょう。　
　最大のリスクは、そのPOが異動・転籍した際に誰が正常納品を担保できるか、の合意形成です。　あるTVドラマのフィクションですが、銀行員が長年をかけてお年寄りと心からの信頼関係を構築し、絶対に損はさせないと口約束で投資信託を買わせます。　銀行は売買手数料を稼いでいきますが、数年後に元本割れでお年寄りは大損害を出しました。　そのとき、銀行は、その担当者を突然地方の支店に異動させるのです。　口約束だけというのはトラブルが発生した後では、大変もろいものなのです。　企業としてはリスクに備えざるを得ないでしょう。　未完成リスク、低品質リスク、瑕疵リスク等についての回避策が記録を残す形で合意できれば請負開発契約でアジャイル開発をすることもありでしょう。　
　ただし、その特別な力量と信頼関係に基づくこの行為は、それを真似た近隣のプロジェクトを惑わせ失敗させるかもしれません。　また、発注側幹部の組織問題の気づきを遅らせてしまうかもしれません。


■　前半はアジャイル開発を準委任契約で作り、後半はウォーターフォール開発を製造請負開発で実施して品質を確保したいと言って来たら・・・

　前半のアジャイル開発は進めて問題ありません。　しかし、当初、前半の契約を実施する際に予め伝えておくべきことは、前半の成果物が完成後にその成果物の出来具合を見極めて費用・期間を再見積りすると宣言することです。　
　最初から、全体の費用・納期ありきで、前半だけアジャイル開発受けることは避けるべきです。　どんなに誠実にアジャイル開発に協力しても、POの判断が失敗すれば、前半のアジャイル開発は失敗することがあります。　試験の議論以前に、動くものが何も作成されないことだってあることを忘れないでください。
　アジャイル開発でプロトタイプ・システム等が動いた後のタイミングに、ウォーターフォール開発で実施すべき要求仕様の提示を受け、改めてKKD法で見積ることになります。　すでに顧客の調整能力、ステークホルダとの関係、主要なアーキテクチャの合意、機能開発や非機能開発上の課題がより具体的に見えていれば、それらを十分勘案して見積りましょう。　それが顧客の予算と期間に納まるのであれば、ウォーターフォール開発で実施することも可能でしょう。　KKD法の「K＝経験」が増加し見積りの精度が上がっているためです。　逆に、前半の経験で、重要機能の実現の目処が立たない、結局何を作りたいのかわからない、ステークホルダに対して発注者側の立場が弱く仕様がよく変わる等を知ったことで撤退という判断もあるでしょう。　前半のアジャイル開発部分の「品質見解」を表明するのは発注者側POの責任になります。　どうしても受けざるを得ない場合には、試験した結果だけを請負契約で担保することが懸命です。


■　初回はウォーターフォール開発、その後は、アジャイル開発という進め方は、妥協可能な進め方かもしれません。

　その場合、初回のウォーターフォール開発は、作るべきものの仕様が最初からほぼ見えていること、期間には余裕があること、受注側がそれを経験等によって見積れること等の条件に合えば不可能ではありません。　初回の開発物をあまり先進的なものにすると失敗のリスクが高まりますので、類似のシステムが既に存在するようなものの開発が望ましいでしょう。　その後のアジャイル開発によって、機能改善を実施していくことで後々の開発スピードアップは可能でしょう。
　ただし、この進め方には弱点があります。　ウォーターフォール開発とアジャイル開発では開発者への要求スキルが変わることです。　最初からアジャイル開発の人材を集めて実施した方が良いソフトウェアができる可能性は高まるでしょう。　
　アジャイル開発の人材を集めて、最初の数ヶ月はウォーターフォール開発の各開発工程をそのままスクラム開発でいうスプリントとして実施し、一旦、試験工程まで完了させるのです。　その間、アジャイル人材としてのスキルの問題があればその対応も実施しチーム力を向上させていきましょう。


■　契約種別に応じた見積りの違いを理解しましょう。

　契約種別によって、見積り手法は変わります。

・請負開発契約なら、仕様を受けて、その完成に必要な金額(リスク対応費込み)と、必要な期間(リスク対応期間込み)と、見積りの条件を提示します。
・準委任契約なら、技術者のスキル要望と期間を受けて、各スキルに対応する単金の和と求められる期間の面積を提示します。

■　POの力量は見極めて受注しなければいけません。

　POがアジャイル開発の成功の鍵を握ります。　たとえ受注側に完成責任が無いといっても、成功しそうも無いシステム開発プロジェクトに優秀な技術者を割り当てるほど、優秀な技術者は余っていません。　船頭のいない船に乗らないために、POに対していくつかの観点で事前に確認した方が良いでしょう。　事前に指摘することで、改善できればWin-Winの世界に繋がるでしょう。






■　POチェック観点１：　幹部の意思・価値観、会社制度、PO人材育成・援護
・経営幹部＆POがアジャイル開発をやりたいと思っているか。　
・発注側組織が準委任契約によるソフトウェア開発を認めているか。
・POが発注側組織においてステークホルダとの交渉権や開発管理者としての権限を持っているか。　

■　POチェック観点２：　POの自覚
・POがゴールのイメージを持っているか。　
・アジャイル開発の完成責任が自分にあることを理解し納得しているか。
・POが主体性を持ち、迅速かつ適切な優先順位を判断し続けないと、良いソフトウェアの完成に至らないことを理解しているか。

■　POチェック観点３：　ウォーターフォール開発との違いの理解
・ウォーターフォール開発とアジャイル開発のスタイルの違いを正しく理解しているか。



8.2　POをサポートする

■　POを全力でサポートしましょう。

　アジャイル開発では、POが完成責任を負います。　しかし、受注側は責任がなくなったことを喜ぶのではなく、Win-Winを目指し、POが完成責任を全うできるよう全力でサポートするべきです。　（そう思わせてくれるPOであるべきです）

■　顧客側幹部にPOへの援護を依頼することもあります。

　POに起因して現場のモチベーションが低下している場合など、アジャイル開発が失敗しそうなときには、まずはPOに改善を求めるべきですが、それでも改善しない場合には、あなたが顧客側幹部に直接エスカレーションしなければいけないかもしれません。　それを行えば最悪の場合には、アジャイル開発は中止と判断され受注契約が途中で打ち切られる可能性も発生します。　しかし、悪い情報を早めに共有して次の進め方を相談するのが、アジャイル開発です。　顧客側に完成責任があるのがアジャイル開発です。　現実は正しく共有し、顧客側企業とはWin-Winのための姿勢を貫くべきだと考えます。　顧客側幹部がアジャイル開発を理解し推進してくれているのであれば、POに対して適切な援護をしてくれるはずです。 

■　あなたのウォーターフォール経験も、アジャイル開発を邪魔します。

　注意しましょう。　詳細は7章を参照してください。

8.3 作業管理責任者として行動する

　準委任契約で受注する場合には、派遣契約とは異なり作業管理責任者の設置と、作業管理責任者を通した作業指示が求められます。　その役割は放棄することができません。

■　プロフェッショナルとして善管注意義務は果たさなければいけません。

 受注会社は、情報処理技術についてプロフェッショナルでなければいけません。　準委任契約では、プロフェッショナルとしての善良な管理者としての注意義務（善管注意義務）を果たさなければいけません。

■　突然のプロジェクト中止に注意しましょう。

　準委任契約は、月額精算などの仕組みを利用すると、契約中止の判断は非常に気軽になります。　しかし、プロジェクト中止の場合には、最低でも前月末までに中止の旨をメールなど記録に残る形で通知することを合意しておきましょう。

■　維持管理はDevOpsを念頭に発注側と交渉しましょう。

　システム開発の後には維持管理が発生します。　アジャイル開発と同時に維持管理の進め方についても合意しておくことが望まれます。
　製造請負開発であれば、仕様に違反していれば瑕疵対応で無償改修を要求することが可能でした。　しかし、日本では仕様も曖昧であり、瑕疵を明確に指摘することは意外に困難な作業です。　さらに、瑕疵対応のパッチが提供されたとしても、それを運用中サービスに導入適用するコストは別途発生します。　それらの混乱を避けるべく保守サービスを締結し、開発費用の10％～20％を支払い続けることが行われているでしょう。　場合によっては、次期開発の中に保守サービスを含めてしまうこともあるでしょう。
　アジャイル開発では、受注側に瑕疵が発生しません。　商用サービスであれば必ず保守サービスが必要になります。　その時、世に言うDevOpsの世界がそれを効率的に解決してくれる枠組みになるかもしれません。

■　ウォーターフォール開発経験のある担当者がアジャイル開発に上手く適応できるとは限りません。

　ウォーターフォール開発では情報処理能力が高くない人材でもプロジェクトに参加させることが可能でした。　アジャイル開発ではコミュニケーション・ロスを少なくするため少数精鋭が求められることもあり、設計からコーディング、テストまで全工程の能力が求められます。　テストしかできない、Javaコーディングしかできない等のスキル幅が狭い担当者については発注者から厳しいスキル査定を受ける可能性がありますし、当の本人もモチベーション維持が難しい旨の申告がある可能性があります。　　

■　アジャイル開発の合理性を知った高スキルの技術者は、不合理なウォーターフォール開発に戻りたくないでしょう。

　アジャイル開発では、3Kが発生するような不合理は発生しません。　また、POの価値観を理解できた開発担当者は、POとの一体感と達成感を得ることが可能でしょう。　そんな担当者がウォーターフォール開発に戻ることになった場合、著しくモチベーションが低下する事態が発生する可能性があります。　人事制度見直しなどと連携して企業と高スキル者とのWin-Winの姿勢を実現していかなければいけません。

■　アジャイル開発では、従来とは人材の育成方法が変わります。

　アジャイル開発では、開発担当者は受身の姿勢が強くなるケースがあります。　POが優秀な場合に全てを指示してくれるから、そこに依存してしまうからです。　しかし、開発人材の育成として望ましくはありません。　いつでもPOの代わりになれる視界とスキルを持つビジネス・リーダ人材を育成していきましょう。

■　人材の育成に伴うプランを発注側と早目から共有し、ロックインを避けておきましょう。

　アジャイル開発では、開発におけるキーマンが固定化されることが進みます。　長期に渡るプロジェクトにおいて、属人化はプロジェクトの弱点となります。　ソースコードから読み取りにくい情報はドキュメントに記録し、共有し、自動リグレッション・テストの整備を実施して属人化を防いでいかなければいけません。　さらに、優秀な開発キーマンには次の育成ステージに進むための人事異動が避けられないかもしれません。　育成プラン等については、それが発生することを予め顧客側へ伝えておくことも大切です。　なお、準委任契約において、顧客側が個人を指定することはできません。　けれどもプロジェクトの継続にできるだけ影響のでないような備えと関係を維持していくことが大切です。




8.4 受注側組織の体制・価値観をVerUpする

　発注社側の経営幹部はアジャイル開発に適合する組織に変えていかなければいけません。　同様に受注社側の経営幹部もアジャイル開発に適合する組織にしなければいけない場合があります。

■　「口利き」と「背取り」ビジネスは高利益ですが、続けると、体力が落ち、最後には「中抜き」されます。

　昔、総合商社が全盛を極めた時代がありました。　商社のビジネス・スタイルは売りたい会社と買いたい会社を結びつける「口利き」ビジネスです。　両者を仲介し手数料をもらう「背取り」をするビジネスモデルを持ち、世界中の商品の取引をつなぐことで莫大な利益を得ていました。　しかし、海外の資源素材会社と日本国内の製造・販売会社、製品出荷先の海外市場間で直接取引できる時代が訪れると、「口利き」の価値が薄れ商社は「中抜き」によって一気に苦境に陥ります。　その後、商社は自ら鉱山等の資源を開発し権利を所有し、それらに付加価値を加える能力を自らが持つことによって復活を遂げてきました。
　一方、ソフトウェア業界における請負開発契約によるソフトウェア開発は、ゼネコンモデルとも言われる多層請負で実施されてきました。　発注者から受けた製造請負を、同じ製造請負で下請け社に発注できれば、口利きと背取りによって苦労せず大きな利益を得ることも可能でした。　巨大なプロジェクトであれば複数社に分割発注するための分割調整や、基本設計などの上流工程の実施によって付加価値を出すこともありました。　そのビジネス・スタイルを極めている会社において、準委任契約をベースとするアジャイル開発では高い利益率を実現できないビジネスだと認識されるかもしれません。　もし、特定の発注先を独占的に維持できる能力があれば口利きと背取りは最高のビジネスモデルでしょう。

　口利きと背取りを長く続ける組織に起こる問題は、ソフトウェア開発基礎体力の喪失です。　若いうちから口利きと背取りが評価される風土では、ソフトウェア開発本来の基礎力と経験はいつしか失われ、付加価値としていた設計力さえも失われます。　ソフトウェア発注者の市場・競合のグローバル化と情報処理技術のコモディティ化、インターネットを活用したビジネスの進化の中で付加価値が見えない組織を間に挟み続けることは難しく、徐々に中抜きされていくでしょう。　

■　市場の変化にも負けない企業体力を維持するために、アジャイル開発を受け入れていきましょう。　

　インターネットによる技術革新（OSSやクラウドなど、さらにはIoTやAIといった最新技術）を活用するソフトウェア開発では、より試行錯誤のフェーズが必要になるでしょう。　また、ソフトウェアによって実現されるサービスも益々PoC作りから開始される比率が高まります。　そのとき、自らの組織で調査・設計～製造・試験までの工程を実施できる能力あることが市場競争力のあるスピードを実現します。　若手を中心として、きちんと製造（プログラミング）の能力がある組織を目指すことが、良い設計者を維持し続けることに繋がるでしょう。

■　顧客と同一場所で開発することは必要です。　

　繰り返しになりますが、アジャイル開発はコミュニケーションが大切です。　ソフトウェア開発の中で発生する様々な課題に対して、直ぐにホワイトボードを囲んだ議論ができる環境が大切です。　そして、報告ではない場での会話や、双方の気づきが理解を深めモチベーションを高め開発を加速していきます。　原則として同一の場所で作業しなければいけません。　それは、顧客側の場所であっても、開発側の場所であっても、中間地点の別の場所であっても構いません。　特に、開発プロジェクトのゴールが十分に全員に理解されるまでの初期には極めて大切です。

■　POが現場と遠い場合には、開発チーム側にも技術面の代理POを置くことも考えましょう。

　各メンバによるゴールの理解が進み、各メンバの主体性が発揮されるようになれば、様々なコミュニケーション・ツールによって代替していくことが可能かもしれません。　しかし、ツールは大切ですが、それを過信しすぎてはいけません。　POとの技術面のコミュニケーションを取り仕切る現場技術リーダを受注者側にて用意することも一つの方法です。　　POの価値観を理解し、設計の中心的メンバあって、コミュニケーション・スキルにも長けたメンバを代理PO・作業管理責任者として配置しましょう。

■　複数の業務の掛け持ちをする場合には、同一顧客からの業務に限定しましょう。

　ウォーターフォール開発では、一人の高スキル技術者が複数の案件を掛け持つことが可能でした。　しかし、アジャイル開発では、それは避けるべきでしょう。　全く異なる顧客からそれぞれ最優先として与えられた仕事を調整することは困難な作業です。　もし、複数の業務を掛け持つとしても、それは同一の顧客からのものとし、優先度の判断で対立が発生しないものにすべきです。　たとえば、開発プロジェクトと、維持管理プロジェクトを９：１の割合で掛け持つことは良い進め方です。　提供サービス側で発生した重大故障に際して、開発プロジェクトの優先度を一時的に下げることは顧客と同意がしやすいでしょう。
　

8.5 品質保証（QA）部門の役割は、・・・微妙

　アジャイル開発を製造請負契約で受注しないことを監視する必要はあります。　しかし、製造請負契約のウォーターフォール開発に比べ、準委任契約で行うアジャイル開発でのQAの出番は明確ではなさそうです。　もし、存在感を発揮するとすれば、以下の対応が必要でしょう。

■　POの視点でアジャイル開発を観測し、問題を抽出しましょう。

　そのためには毎朝のミーティングに参加して、チーム状態を観測する必要もあります。

■　発注側のPOにアドバイスしましょう。

　アジャイル開発の進め方の問題があれば、POに対して意見する必要があります。　
　スクラム開発には、スクラム・マスターというポジションがありますが、それに近いポジションにならざるを得ないかもしれません。
　しかし、ウォーターフォール開発の時のような活躍の場があるのかについては、不明です。



























9．　和アジャイルの誰時




9.1 本書をざっと、まとめ直してみる

　再び本書の目次を眺めてみてください。　発注側の経営幹部、ＰＯ、受注側の開発メンバ、受注側の責任者に向けて、それぞれに対するメッセージとしています。　表紙にも開発ステップに関するメッセージを埋め込んでいます。

■　発注側・経営幹部へのメッセージ

・アジャイル開発のメリットを受けるのはあなた（経営幹部）です。　ソフトウェア開発の進め方を、「大事なことを先にやる」、「フィードバックを早く回す」、そう変えるだけです。　変化する状況にスピードディに対応するには、その変化対応力が大切なのです。
・アジャイル開発を推進するのはあなた自身（経営幹部）の役割です。　あなたが自らの組織を変革していかなければいけません。 もし、社内でアジャイル開発が未だ上手く実践されていないとしたら、組織風土（価値観、責任・制度、育成）に問題があるはずです。　それを改革するために、先頭に立って汗をかいてリーダシップを見せていかなければいけないのは、あなた自身です。　あなたはまずPOの心得を知らなければいけないでしょう。
・開発責任者になれるPOを育成し、支援し、援護しなければいけません。　POとは情報処理技術を知り、チーム運営のできるビジネス・リーダです。

■　発注側・POへのメッセージ

・アジャイル開発は準委任契約で実施しないと、良いソフトウェア作成には至りません。　請負開発契約でアジャイル開発を実施した場合には、あなたの期待するアジャイル開発になることはあり得ません。
・アジャイル開発ではPOに完成責任・品質確保責任が発生します。　責任に見合う権限を持ちましょう。
・POに必要なのはビジネス・リーダシップによるチーム運営力です。　POが受身だとソフトウェアは完成しません。　主体性が重要です。
・良いソフトウェアを作るには開発メンバのモチベーションが重要です。　モチベーションを高く維持するためにPOは努力しなければいけません。

■　アジャイル開発メンバ（ソフトウェア技術者）へのメッセージ

・「アジャイル開発をやりたい」と言うのは発注側です。　受注側が言い出し誘導するのは無責任です。　なぜなら、発注者側がソフトウェアの完成責任・品質確保責任を負うべきだからです。
・アジャイル開発に参加したいが契約制度に関わりたくないなら、自社製品の内製プロジェクトや、派遣社員として他社のアジャイル開発プロジェクトに参加するのが、簡単な道です。
・アジャイル開発では、コミュニケーション・スキルが重要になります。　コミュニケーションをどうしても避けたければ、アジャイル開発からは離脱しましょう。
・アジャイル開発では、POの優先度判断によってプロジェクトが進みます。目指すゴールとPOの価値観を正しく理解して、あなたの主体性を発揮してPOを支援していきましょう。
・アジャイル開発に参加したからには、技術的な貢献をしましょう。　プロジェクト以外でも情報処理分野の最新技術を広く習得し、自分を磨き続ける姿勢を持続しましょう。

■　受注側責任者へのメッセージ

・アジャイル開発を成功に導くためには、製造請負契約で受注してはいけません。　目先の売り上げに負けて製造請負契約で受注すると、両者が、そして日本の情報処理業界全体が、子供たちが不幸になります。


9.2 和アジャイルが目指すべき世界

　日本におけるアジャイル開発、和アジャイルで目指す世界はどこでしょうか？

・日本のソフトウェア開発が世界で競争力を持つこと。　情報システムの開発能力が米国並みに上がること。　発注者が望む良いソフトウェアをリーズナブル（価格、期間、品質）に作りだす世界になること。
・モチベーションの高い優秀なソフトウェア技術者が活躍して良いソフトウェアを作れる場が普及すること。　ソフトウェア技術者が開発で充実感と成長を感じられる世界になること。
　
　著者は、これらを目指します。　そのためにはウォーターフォール開発ではダメです。　アジャイル開発を日本における受発注型ソフトウェア開発の現場でも普通に使える状況が必要です。　2020年度からはプログラミング教育が小学校に導入されます。　彼ら・彼女らが就職する前に日本の現状を変えなければいけません。

■　日本の現状の不都合を正しく認識する発注者が主流になることが望まれます。

　まずは、日米格差とその問題点を発注者が正しく理解することが大切だと考えます。

　日本におけるアジャイル開発は、IT系ベンチャー企業などでは既に常識として取り入れられていると思います。　しかし、メインフレームの経験等のある企業や、発注でシステムを開発しようとする企業では未だ主流の開発スタイルには至っていないのではないでしょうか。　まだまだ、日の出前の状態にあります。　本書名に使った「誰時」とは、明け方・日の出前のことです。　既にアジャイル開発を実践できているベンチャー企業の皆さん、内製開発をベースにアジャイル開発を実践している皆さんには、本書の内容は遠い国の笑い話かもしれません。　

■　アジャイル開発スタイルを日本の受発注によるソフトウェア開発の実情に合わせて、上手く実施するための工夫とコツを見つけ出すことです。

　漢字は中国で作られました。しかし、日本独自のひらがなを生み出し、漢字の間にそれを挟んで多彩な表現と文化を生み出しました。　米国企業が活用するアジャイル開発を日本の受発注関係の中で使っていくためにも、いくつかの工夫とコツの追加が必要です。 本書ではそれをまとめたいと思い書き始めました。 


9.3 本書籍もβ版

　そして、この書籍自体もアジャイル開発のような継続的な進化を目指します。　

■　フィードバックを得て、改善をまわすのが「アジャイル」なスタイルのハズです。

　本書も、「アジャイル」なスタイルで出版します。　他の皆さんの意見を聞きながら改善するのがアジャイルスタイルだと信じるからです。　まだまだ日本のソフトウェア産業界におけるアジャイル開発スタイルは「誰時」なのです。　時代の変化・人々の経験からのフィードバックに対応して、進化させ追従していきたいと思います。
　　　・フィードバック先： 　（省略）
　　　・情報の更新案内：　（省略）


